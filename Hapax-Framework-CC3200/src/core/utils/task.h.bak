/*
 * task.h
 *
 * Created: 16/10/2015 23:34:05
 *  Author: TheXeno
 */ 


#ifndef TASK_H_BAK_
#define TASK_H_BAK_


#include "sys_types.h"
#include "timer_hal.h"

typedef enum
{
	TASK_LOCK_ENABLE = 0U,
	TASK_LOCK_DISABLE
} task_lock_t;

typedef int32_t task_tick_t;

typedef enum
{
	TASK_IDLE = 0U,
	TASK_READY,
	TASK_RUN,
	TASK_QUEUE
} task_state_t;

typedef struct {
	task_tick_t interval_tick;
	task_tick_t elapsed;
	task_tick_t last_tick;
	void (*task_fp)(void);
	task_state_t state;
} task_t;

extern task_t tasks[];

typedef struct task_struct {

	const timer_hal_cfg_t* timer;
	task_tick_t    tick_quanta;
	task_tick_t    max_tick_no_wrap;
	base_t	total_tasks;
	long	sys_clock;
} task_conf_t;


extern const task_conf_t task_cfg;

void Task_scheduler_start(const task_conf_t* conf);
void Task_scheduler_stop(const task_conf_t* conf);
void Task_scheduler_init(const task_conf_t* conf);
task_lock_t Task_create(const task_conf_t* conf, task_tick_t p, void (*func_p)(void));
void Task_idle(const task_conf_t* conf);
uint8_t Task_get_total_task(void);
task_tick_t Task_systick_get(void);

/* fine task */




#endif /* TASK_H_BAK_ */


