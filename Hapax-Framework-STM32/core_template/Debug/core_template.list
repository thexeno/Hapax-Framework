
core_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ba4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cd4  08000cd4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cd4  08000cd4  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000cd4  08000cd4  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cd4  08000cd4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cd4  08000cd4  00010cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cd8  08000cd8  00010cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000024  08000d00  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08000d00  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f64  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010f5  00000000  00000000  00024fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003f0  00000000  00000000  000260a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000358  00000000  00000000  00026498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000191a  00000000  00000000  000267f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000591a  00000000  00000000  0002810a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00067f9f  00000000  00000000  0002da24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000959c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d54  00000000  00000000  00095a40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08000cbc 	.word	0x08000cbc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08000cbc 	.word	0x08000cbc

08000170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	4b08      	ldr	r3, [pc, #32]	; (8000198 <HAL_Init+0x28>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a07      	ldr	r2, [pc, #28]	; (8000198 <HAL_Init+0x28>)
 800017a:	f043 0310 	orr.w	r3, r3, #16
 800017e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000180:	2003      	movs	r0, #3
 8000182:	f000 f8eb 	bl	800035c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f000 f808 	bl	800019c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800018c:	f000 fb48 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	40022000 	.word	0x40022000

0800019c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001a4:	4b12      	ldr	r3, [pc, #72]	; (80001f0 <HAL_InitTick+0x54>)
 80001a6:	681a      	ldr	r2, [r3, #0]
 80001a8:	4b12      	ldr	r3, [pc, #72]	; (80001f4 <HAL_InitTick+0x58>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	4619      	mov	r1, r3
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80001b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 f8f5 	bl	80003aa <HAL_SYSTICK_Config>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001c6:	2301      	movs	r3, #1
 80001c8:	e00e      	b.n	80001e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2b0f      	cmp	r3, #15
 80001ce:	d80a      	bhi.n	80001e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001d0:	2200      	movs	r2, #0
 80001d2:	6879      	ldr	r1, [r7, #4]
 80001d4:	f04f 30ff 	mov.w	r0, #4294967295
 80001d8:	f000 f8cb 	bl	8000372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001dc:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <HAL_InitTick+0x5c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001e2:	2300      	movs	r3, #0
 80001e4:	e000      	b.n	80001e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001e6:	2301      	movs	r3, #1
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000008 	.word	0x20000008
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000000 	.word	0x20000000

080001fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f003 0307 	and.w	r3, r3, #7
 800020a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800020c:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <__NVIC_SetPriorityGrouping+0x44>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000212:	68ba      	ldr	r2, [r7, #8]
 8000214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000218:	4013      	ands	r3, r2
 800021a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800022c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800022e:	4a04      	ldr	r2, [pc, #16]	; (8000240 <__NVIC_SetPriorityGrouping+0x44>)
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	60d3      	str	r3, [r2, #12]
}
 8000234:	bf00      	nop
 8000236:	3714      	adds	r7, #20
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000ed00 	.word	0xe000ed00

08000244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <__NVIC_GetPriorityGrouping+0x18>)
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	0a1b      	lsrs	r3, r3, #8
 800024e:	f003 0307 	and.w	r3, r3, #7
}
 8000252:	4618      	mov	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	e000ed00 	.word	0xe000ed00

08000260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	6039      	str	r1, [r7, #0]
 800026a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800026c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000270:	2b00      	cmp	r3, #0
 8000272:	db0a      	blt.n	800028a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	b2da      	uxtb	r2, r3
 8000278:	490c      	ldr	r1, [pc, #48]	; (80002ac <__NVIC_SetPriority+0x4c>)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	0112      	lsls	r2, r2, #4
 8000280:	b2d2      	uxtb	r2, r2
 8000282:	440b      	add	r3, r1
 8000284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000288:	e00a      	b.n	80002a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	b2da      	uxtb	r2, r3
 800028e:	4908      	ldr	r1, [pc, #32]	; (80002b0 <__NVIC_SetPriority+0x50>)
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	f003 030f 	and.w	r3, r3, #15
 8000296:	3b04      	subs	r3, #4
 8000298:	0112      	lsls	r2, r2, #4
 800029a:	b2d2      	uxtb	r2, r2
 800029c:	440b      	add	r3, r1
 800029e:	761a      	strb	r2, [r3, #24]
}
 80002a0:	bf00      	nop
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e000e100 	.word	0xe000e100
 80002b0:	e000ed00 	.word	0xe000ed00

080002b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b089      	sub	sp, #36	; 0x24
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	60f8      	str	r0, [r7, #12]
 80002bc:	60b9      	str	r1, [r7, #8]
 80002be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	f003 0307 	and.w	r3, r3, #7
 80002c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002c8:	69fb      	ldr	r3, [r7, #28]
 80002ca:	f1c3 0307 	rsb	r3, r3, #7
 80002ce:	2b04      	cmp	r3, #4
 80002d0:	bf28      	it	cs
 80002d2:	2304      	movcs	r3, #4
 80002d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	3304      	adds	r3, #4
 80002da:	2b06      	cmp	r3, #6
 80002dc:	d902      	bls.n	80002e4 <NVIC_EncodePriority+0x30>
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	3b03      	subs	r3, #3
 80002e2:	e000      	b.n	80002e6 <NVIC_EncodePriority+0x32>
 80002e4:	2300      	movs	r3, #0
 80002e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ec:	69bb      	ldr	r3, [r7, #24]
 80002ee:	fa02 f303 	lsl.w	r3, r2, r3
 80002f2:	43da      	mvns	r2, r3
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	401a      	ands	r2, r3
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	43d9      	mvns	r1, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800030c:	4313      	orrs	r3, r2
         );
}
 800030e:	4618      	mov	r0, r3
 8000310:	3724      	adds	r7, #36	; 0x24
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr

08000318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3b01      	subs	r3, #1
 8000324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000328:	d301      	bcc.n	800032e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800032a:	2301      	movs	r3, #1
 800032c:	e00f      	b.n	800034e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800032e:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <SysTick_Config+0x40>)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	3b01      	subs	r3, #1
 8000334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000336:	210f      	movs	r1, #15
 8000338:	f04f 30ff 	mov.w	r0, #4294967295
 800033c:	f7ff ff90 	bl	8000260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <SysTick_Config+0x40>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000346:	4b04      	ldr	r3, [pc, #16]	; (8000358 <SysTick_Config+0x40>)
 8000348:	2207      	movs	r2, #7
 800034a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800034c:	2300      	movs	r3, #0
}
 800034e:	4618      	mov	r0, r3
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	e000e010 	.word	0xe000e010

0800035c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f7ff ff49 	bl	80001fc <__NVIC_SetPriorityGrouping>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000372:	b580      	push	{r7, lr}
 8000374:	b086      	sub	sp, #24
 8000376:	af00      	add	r7, sp, #0
 8000378:	4603      	mov	r3, r0
 800037a:	60b9      	str	r1, [r7, #8]
 800037c:	607a      	str	r2, [r7, #4]
 800037e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000384:	f7ff ff5e 	bl	8000244 <__NVIC_GetPriorityGrouping>
 8000388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	68b9      	ldr	r1, [r7, #8]
 800038e:	6978      	ldr	r0, [r7, #20]
 8000390:	f7ff ff90 	bl	80002b4 <NVIC_EncodePriority>
 8000394:	4602      	mov	r2, r0
 8000396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800039a:	4611      	mov	r1, r2
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff5f 	bl	8000260 <__NVIC_SetPriority>
}
 80003a2:	bf00      	nop
 80003a4:	3718      	adds	r7, #24
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f7ff ffb0 	bl	8000318 <SysTick_Config>
 80003b8:	4603      	mov	r3, r0
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b08b      	sub	sp, #44	; 0x2c
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80003ce:	2300      	movs	r3, #0
 80003d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80003d2:	2300      	movs	r3, #0
 80003d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003d6:	e127      	b.n	8000628 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80003d8:	2201      	movs	r2, #1
 80003da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003dc:	fa02 f303 	lsl.w	r3, r2, r3
 80003e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	69fa      	ldr	r2, [r7, #28]
 80003e8:	4013      	ands	r3, r2
 80003ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80003ec:	69ba      	ldr	r2, [r7, #24]
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	f040 8116 	bne.w	8000622 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	2b12      	cmp	r3, #18
 80003fc:	d034      	beq.n	8000468 <HAL_GPIO_Init+0xa4>
 80003fe:	2b12      	cmp	r3, #18
 8000400:	d80d      	bhi.n	800041e <HAL_GPIO_Init+0x5a>
 8000402:	2b02      	cmp	r3, #2
 8000404:	d02b      	beq.n	800045e <HAL_GPIO_Init+0x9a>
 8000406:	2b02      	cmp	r3, #2
 8000408:	d804      	bhi.n	8000414 <HAL_GPIO_Init+0x50>
 800040a:	2b00      	cmp	r3, #0
 800040c:	d031      	beq.n	8000472 <HAL_GPIO_Init+0xae>
 800040e:	2b01      	cmp	r3, #1
 8000410:	d01c      	beq.n	800044c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000412:	e048      	b.n	80004a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000414:	2b03      	cmp	r3, #3
 8000416:	d043      	beq.n	80004a0 <HAL_GPIO_Init+0xdc>
 8000418:	2b11      	cmp	r3, #17
 800041a:	d01b      	beq.n	8000454 <HAL_GPIO_Init+0x90>
          break;
 800041c:	e043      	b.n	80004a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800041e:	4a89      	ldr	r2, [pc, #548]	; (8000644 <HAL_GPIO_Init+0x280>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d026      	beq.n	8000472 <HAL_GPIO_Init+0xae>
 8000424:	4a87      	ldr	r2, [pc, #540]	; (8000644 <HAL_GPIO_Init+0x280>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d806      	bhi.n	8000438 <HAL_GPIO_Init+0x74>
 800042a:	4a87      	ldr	r2, [pc, #540]	; (8000648 <HAL_GPIO_Init+0x284>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d020      	beq.n	8000472 <HAL_GPIO_Init+0xae>
 8000430:	4a86      	ldr	r2, [pc, #536]	; (800064c <HAL_GPIO_Init+0x288>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d01d      	beq.n	8000472 <HAL_GPIO_Init+0xae>
          break;
 8000436:	e036      	b.n	80004a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000438:	4a85      	ldr	r2, [pc, #532]	; (8000650 <HAL_GPIO_Init+0x28c>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d019      	beq.n	8000472 <HAL_GPIO_Init+0xae>
 800043e:	4a85      	ldr	r2, [pc, #532]	; (8000654 <HAL_GPIO_Init+0x290>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d016      	beq.n	8000472 <HAL_GPIO_Init+0xae>
 8000444:	4a84      	ldr	r2, [pc, #528]	; (8000658 <HAL_GPIO_Init+0x294>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d013      	beq.n	8000472 <HAL_GPIO_Init+0xae>
          break;
 800044a:	e02c      	b.n	80004a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	623b      	str	r3, [r7, #32]
          break;
 8000452:	e028      	b.n	80004a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	3304      	adds	r3, #4
 800045a:	623b      	str	r3, [r7, #32]
          break;
 800045c:	e023      	b.n	80004a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	68db      	ldr	r3, [r3, #12]
 8000462:	3308      	adds	r3, #8
 8000464:	623b      	str	r3, [r7, #32]
          break;
 8000466:	e01e      	b.n	80004a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	330c      	adds	r3, #12
 800046e:	623b      	str	r3, [r7, #32]
          break;
 8000470:	e019      	b.n	80004a6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d102      	bne.n	8000480 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800047a:	2304      	movs	r3, #4
 800047c:	623b      	str	r3, [r7, #32]
          break;
 800047e:	e012      	b.n	80004a6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d105      	bne.n	8000494 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000488:	2308      	movs	r3, #8
 800048a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	69fa      	ldr	r2, [r7, #28]
 8000490:	611a      	str	r2, [r3, #16]
          break;
 8000492:	e008      	b.n	80004a6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000494:	2308      	movs	r3, #8
 8000496:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	69fa      	ldr	r2, [r7, #28]
 800049c:	615a      	str	r2, [r3, #20]
          break;
 800049e:	e002      	b.n	80004a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004a0:	2300      	movs	r3, #0
 80004a2:	623b      	str	r3, [r7, #32]
          break;
 80004a4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004a6:	69bb      	ldr	r3, [r7, #24]
 80004a8:	2bff      	cmp	r3, #255	; 0xff
 80004aa:	d801      	bhi.n	80004b0 <HAL_GPIO_Init+0xec>
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	e001      	b.n	80004b4 <HAL_GPIO_Init+0xf0>
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3304      	adds	r3, #4
 80004b4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80004b6:	69bb      	ldr	r3, [r7, #24]
 80004b8:	2bff      	cmp	r3, #255	; 0xff
 80004ba:	d802      	bhi.n	80004c2 <HAL_GPIO_Init+0xfe>
 80004bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	e002      	b.n	80004c8 <HAL_GPIO_Init+0x104>
 80004c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c4:	3b08      	subs	r3, #8
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	210f      	movs	r1, #15
 80004d0:	693b      	ldr	r3, [r7, #16]
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	43db      	mvns	r3, r3
 80004d8:	401a      	ands	r2, r3
 80004da:	6a39      	ldr	r1, [r7, #32]
 80004dc:	693b      	ldr	r3, [r7, #16]
 80004de:	fa01 f303 	lsl.w	r3, r1, r3
 80004e2:	431a      	orrs	r2, r3
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	f000 8096 	beq.w	8000622 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004f6:	4b59      	ldr	r3, [pc, #356]	; (800065c <HAL_GPIO_Init+0x298>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a58      	ldr	r2, [pc, #352]	; (800065c <HAL_GPIO_Init+0x298>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b56      	ldr	r3, [pc, #344]	; (800065c <HAL_GPIO_Init+0x298>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800050e:	4a54      	ldr	r2, [pc, #336]	; (8000660 <HAL_GPIO_Init+0x29c>)
 8000510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000512:	089b      	lsrs	r3, r3, #2
 8000514:	3302      	adds	r3, #2
 8000516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051e:	f003 0303 	and.w	r3, r3, #3
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	220f      	movs	r2, #15
 8000526:	fa02 f303 	lsl.w	r3, r2, r3
 800052a:	43db      	mvns	r3, r3
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	4013      	ands	r3, r2
 8000530:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a4b      	ldr	r2, [pc, #300]	; (8000664 <HAL_GPIO_Init+0x2a0>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d013      	beq.n	8000562 <HAL_GPIO_Init+0x19e>
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a4a      	ldr	r2, [pc, #296]	; (8000668 <HAL_GPIO_Init+0x2a4>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d00d      	beq.n	800055e <HAL_GPIO_Init+0x19a>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a49      	ldr	r2, [pc, #292]	; (800066c <HAL_GPIO_Init+0x2a8>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d007      	beq.n	800055a <HAL_GPIO_Init+0x196>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a48      	ldr	r2, [pc, #288]	; (8000670 <HAL_GPIO_Init+0x2ac>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d101      	bne.n	8000556 <HAL_GPIO_Init+0x192>
 8000552:	2303      	movs	r3, #3
 8000554:	e006      	b.n	8000564 <HAL_GPIO_Init+0x1a0>
 8000556:	2304      	movs	r3, #4
 8000558:	e004      	b.n	8000564 <HAL_GPIO_Init+0x1a0>
 800055a:	2302      	movs	r3, #2
 800055c:	e002      	b.n	8000564 <HAL_GPIO_Init+0x1a0>
 800055e:	2301      	movs	r3, #1
 8000560:	e000      	b.n	8000564 <HAL_GPIO_Init+0x1a0>
 8000562:	2300      	movs	r3, #0
 8000564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000566:	f002 0203 	and.w	r2, r2, #3
 800056a:	0092      	lsls	r2, r2, #2
 800056c:	4093      	lsls	r3, r2
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	4313      	orrs	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000574:	493a      	ldr	r1, [pc, #232]	; (8000660 <HAL_GPIO_Init+0x29c>)
 8000576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000578:	089b      	lsrs	r3, r3, #2
 800057a:	3302      	adds	r3, #2
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800058a:	2b00      	cmp	r3, #0
 800058c:	d006      	beq.n	800059c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800058e:	4b39      	ldr	r3, [pc, #228]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4938      	ldr	r1, [pc, #224]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	4313      	orrs	r3, r2
 8000598:	600b      	str	r3, [r1, #0]
 800059a:	e006      	b.n	80005aa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800059c:	4b35      	ldr	r3, [pc, #212]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	69bb      	ldr	r3, [r7, #24]
 80005a2:	43db      	mvns	r3, r3
 80005a4:	4933      	ldr	r1, [pc, #204]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 80005a6:	4013      	ands	r3, r2
 80005a8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d006      	beq.n	80005c4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 80005b8:	685a      	ldr	r2, [r3, #4]
 80005ba:	492e      	ldr	r1, [pc, #184]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	4313      	orrs	r3, r2
 80005c0:	604b      	str	r3, [r1, #4]
 80005c2:	e006      	b.n	80005d2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80005c4:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 80005c6:	685a      	ldr	r2, [r3, #4]
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	43db      	mvns	r3, r3
 80005cc:	4929      	ldr	r1, [pc, #164]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 80005ce:	4013      	ands	r3, r2
 80005d0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d006      	beq.n	80005ec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80005de:	4b25      	ldr	r3, [pc, #148]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 80005e0:	689a      	ldr	r2, [r3, #8]
 80005e2:	4924      	ldr	r1, [pc, #144]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	608b      	str	r3, [r1, #8]
 80005ea:	e006      	b.n	80005fa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	43db      	mvns	r3, r3
 80005f4:	491f      	ldr	r1, [pc, #124]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 80005f6:	4013      	ands	r3, r2
 80005f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000602:	2b00      	cmp	r3, #0
 8000604:	d006      	beq.n	8000614 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 8000608:	68da      	ldr	r2, [r3, #12]
 800060a:	491a      	ldr	r1, [pc, #104]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	4313      	orrs	r3, r2
 8000610:	60cb      	str	r3, [r1, #12]
 8000612:	e006      	b.n	8000622 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 8000616:	68da      	ldr	r2, [r3, #12]
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	43db      	mvns	r3, r3
 800061c:	4915      	ldr	r1, [pc, #84]	; (8000674 <HAL_GPIO_Init+0x2b0>)
 800061e:	4013      	ands	r3, r2
 8000620:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	3301      	adds	r3, #1
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062e:	fa22 f303 	lsr.w	r3, r2, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	f47f aed0 	bne.w	80003d8 <HAL_GPIO_Init+0x14>
  }
}
 8000638:	bf00      	nop
 800063a:	372c      	adds	r7, #44	; 0x2c
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	10210000 	.word	0x10210000
 8000648:	10110000 	.word	0x10110000
 800064c:	10120000 	.word	0x10120000
 8000650:	10310000 	.word	0x10310000
 8000654:	10320000 	.word	0x10320000
 8000658:	10220000 	.word	0x10220000
 800065c:	40021000 	.word	0x40021000
 8000660:	40010000 	.word	0x40010000
 8000664:	40010800 	.word	0x40010800
 8000668:	40010c00 	.word	0x40010c00
 800066c:	40011000 	.word	0x40011000
 8000670:	40011400 	.word	0x40011400
 8000674:	40010400 	.word	0x40010400

08000678 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000678:	b480      	push	{r7}
 800067a:	b089      	sub	sp, #36	; 0x24
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8000686:	e09a      	b.n	80007be <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000688:	2201      	movs	r2, #1
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	fa02 f303 	lsl.w	r3, r2, r3
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	4013      	ands	r3, r2
 8000694:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8000696:	69bb      	ldr	r3, [r7, #24]
 8000698:	2b00      	cmp	r3, #0
 800069a:	f000 808d 	beq.w	80007b8 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800069e:	4a4e      	ldr	r2, [pc, #312]	; (80007d8 <HAL_GPIO_DeInit+0x160>)
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	3302      	adds	r3, #2
 80006a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006aa:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	f003 0303 	and.w	r3, r3, #3
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	220f      	movs	r2, #15
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	4013      	ands	r3, r2
 80006be:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a46      	ldr	r2, [pc, #280]	; (80007dc <HAL_GPIO_DeInit+0x164>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d013      	beq.n	80006f0 <HAL_GPIO_DeInit+0x78>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a45      	ldr	r2, [pc, #276]	; (80007e0 <HAL_GPIO_DeInit+0x168>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d00d      	beq.n	80006ec <HAL_GPIO_DeInit+0x74>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a44      	ldr	r2, [pc, #272]	; (80007e4 <HAL_GPIO_DeInit+0x16c>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d007      	beq.n	80006e8 <HAL_GPIO_DeInit+0x70>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a43      	ldr	r2, [pc, #268]	; (80007e8 <HAL_GPIO_DeInit+0x170>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d101      	bne.n	80006e4 <HAL_GPIO_DeInit+0x6c>
 80006e0:	2303      	movs	r3, #3
 80006e2:	e006      	b.n	80006f2 <HAL_GPIO_DeInit+0x7a>
 80006e4:	2304      	movs	r3, #4
 80006e6:	e004      	b.n	80006f2 <HAL_GPIO_DeInit+0x7a>
 80006e8:	2302      	movs	r3, #2
 80006ea:	e002      	b.n	80006f2 <HAL_GPIO_DeInit+0x7a>
 80006ec:	2301      	movs	r3, #1
 80006ee:	e000      	b.n	80006f2 <HAL_GPIO_DeInit+0x7a>
 80006f0:	2300      	movs	r3, #0
 80006f2:	69fa      	ldr	r2, [r7, #28]
 80006f4:	f002 0203 	and.w	r2, r2, #3
 80006f8:	0092      	lsls	r2, r2, #2
 80006fa:	4093      	lsls	r3, r2
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d132      	bne.n	8000768 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	f003 0303 	and.w	r3, r3, #3
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	220f      	movs	r2, #15
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8000712:	4a31      	ldr	r2, [pc, #196]	; (80007d8 <HAL_GPIO_DeInit+0x160>)
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	089b      	lsrs	r3, r3, #2
 8000718:	3302      	adds	r3, #2
 800071a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	43da      	mvns	r2, r3
 8000722:	482d      	ldr	r0, [pc, #180]	; (80007d8 <HAL_GPIO_DeInit+0x160>)
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	089b      	lsrs	r3, r3, #2
 8000728:	400a      	ands	r2, r1
 800072a:	3302      	adds	r3, #2
 800072c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000730:	4b2e      	ldr	r3, [pc, #184]	; (80007ec <HAL_GPIO_DeInit+0x174>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	43db      	mvns	r3, r3
 8000738:	492c      	ldr	r1, [pc, #176]	; (80007ec <HAL_GPIO_DeInit+0x174>)
 800073a:	4013      	ands	r3, r2
 800073c:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800073e:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <HAL_GPIO_DeInit+0x174>)
 8000740:	685a      	ldr	r2, [r3, #4]
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	43db      	mvns	r3, r3
 8000746:	4929      	ldr	r1, [pc, #164]	; (80007ec <HAL_GPIO_DeInit+0x174>)
 8000748:	4013      	ands	r3, r2
 800074a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800074c:	4b27      	ldr	r3, [pc, #156]	; (80007ec <HAL_GPIO_DeInit+0x174>)
 800074e:	689a      	ldr	r2, [r3, #8]
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	43db      	mvns	r3, r3
 8000754:	4925      	ldr	r1, [pc, #148]	; (80007ec <HAL_GPIO_DeInit+0x174>)
 8000756:	4013      	ands	r3, r2
 8000758:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <HAL_GPIO_DeInit+0x174>)
 800075c:	68da      	ldr	r2, [r3, #12]
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	43db      	mvns	r3, r3
 8000762:	4922      	ldr	r1, [pc, #136]	; (80007ec <HAL_GPIO_DeInit+0x174>)
 8000764:	4013      	ands	r3, r2
 8000766:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	2bff      	cmp	r3, #255	; 0xff
 800076c:	d801      	bhi.n	8000772 <HAL_GPIO_DeInit+0xfa>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	e001      	b.n	8000776 <HAL_GPIO_DeInit+0xfe>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	3304      	adds	r3, #4
 8000776:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	2bff      	cmp	r3, #255	; 0xff
 800077c:	d802      	bhi.n	8000784 <HAL_GPIO_DeInit+0x10c>
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	e002      	b.n	800078a <HAL_GPIO_DeInit+0x112>
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	3b08      	subs	r3, #8
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	210f      	movs	r1, #15
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	fa01 f303 	lsl.w	r3, r1, r3
 8000798:	43db      	mvns	r3, r3
 800079a:	401a      	ands	r2, r3
 800079c:	2104      	movs	r1, #4
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	fa01 f303 	lsl.w	r3, r1, r3
 80007a4:	431a      	orrs	r2, r3
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68da      	ldr	r2, [r3, #12]
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	43db      	mvns	r3, r3
 80007b2:	401a      	ands	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	3301      	adds	r3, #1
 80007bc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	fa22 f303 	lsr.w	r3, r2, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f47f af5e 	bne.w	8000688 <HAL_GPIO_DeInit+0x10>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3724      	adds	r7, #36	; 0x24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40010000 	.word	0x40010000
 80007dc:	40010800 	.word	0x40010800
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	40011000 	.word	0x40011000
 80007e8:	40011400 	.word	0x40011400
 80007ec:	40010400 	.word	0x40010400

080007f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	807b      	strh	r3, [r7, #2]
 80007fc:	4613      	mov	r3, r2
 80007fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000800:	787b      	ldrb	r3, [r7, #1]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d003      	beq.n	800080e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000806:	887a      	ldrh	r2, [r7, #2]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800080c:	e003      	b.n	8000816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800080e:	887b      	ldrh	r3, [r7, #2]
 8000810:	041a      	lsls	r2, r3, #16
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	611a      	str	r2, [r3, #16]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <SystemInit+0x5c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a14      	ldr	r2, [pc, #80]	; (8000888 <SystemInit+0x5c>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <SystemInit+0x5c>)
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	4911      	ldr	r1, [pc, #68]	; (8000888 <SystemInit+0x5c>)
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <SystemInit+0x60>)
 8000844:	4013      	ands	r3, r2
 8000846:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <SystemInit+0x5c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <SystemInit+0x5c>)
 800084e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000856:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <SystemInit+0x5c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <SystemInit+0x5c>)
 800085e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000862:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <SystemInit+0x5c>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	4a07      	ldr	r2, [pc, #28]	; (8000888 <SystemInit+0x5c>)
 800086a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800086e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <SystemInit+0x5c>)
 8000872:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000876:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <SystemInit+0x64>)
 800087a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800087e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	40021000 	.word	0x40021000
 800088c:	f8ff0000 	.word	0xf8ff0000
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Gpio_hal_set_value>:
		return GPIO_ERR_PIN;
}


gpio_hal_err_t Gpio_hal_set_value(base_t pin_enum, gpio_hal_val_t val) // per il gpio_hal_val_t metti un redefine di quello ufficiale stm32
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
	if (pin_enum < total_pins)
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <Gpio_hal_set_value+0x50>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d217      	bcs.n	80008da <Gpio_hal_set_value+0x46>
	{
		HAL_GPIO_WritePin(gpio_hal_cfg_buff[pin_enum].port, gpio_hal_cfg_buff[pin_enum].pin, val);
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <Gpio_hal_set_value+0x54>)
 80008ac:	6819      	ldr	r1, [r3, #0]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	440b      	add	r3, r1
 80008ba:	6858      	ldr	r0, [r3, #4]
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <Gpio_hal_set_value+0x54>)
 80008be:	6819      	ldr	r1, [r3, #0]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	4613      	mov	r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	4413      	add	r3, r2
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	440b      	add	r3, r1
 80008cc:	891b      	ldrh	r3, [r3, #8]
 80008ce:	78fa      	ldrb	r2, [r7, #3]
 80008d0:	4619      	mov	r1, r3
 80008d2:	f7ff ff8d 	bl	80007f0 <HAL_GPIO_WritePin>
		return GPIO_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e000      	b.n	80008dc <Gpio_hal_set_value+0x48>
	}
	else
		return GPIO_ERR_PIN;
 80008da:	2302      	movs	r3, #2
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000040 	.word	0x20000040
 80008e8:	20000044 	.word	0x20000044

080008ec <Gpio_hal_init>:
	return port_id->IDR; // in file stm32f103x6.h
}


void Gpio_hal_init(gpio_hal_cfg_t* handle, base_t sz)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]

	gpio_hal_cfg_buff = handle;
 800090a:	4a7b      	ldr	r2, [pc, #492]	; (8000af8 <Gpio_hal_init+0x20c>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6013      	str	r3, [r2, #0]
	total_pins = sz;
 8000910:	4a7a      	ldr	r2, [pc, #488]	; (8000afc <Gpio_hal_init+0x210>)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	6013      	str	r3, [r2, #0]

	for (i = 0; i < sz /* CONF_TOTAL_APP_PIN */ ; i++)
 8000916:	2300      	movs	r3, #0
 8000918:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800091c:	e01b      	b.n	8000956 <Gpio_hal_init+0x6a>
	{
		HAL_GPIO_DeInit(handle[i].port, handle[i].pin);
 800091e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000922:	4613      	mov	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	461a      	mov	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	6858      	ldr	r0, [r3, #4]
 8000932:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000936:	4613      	mov	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	461a      	mov	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4413      	add	r3, r2
 8000944:	891b      	ldrh	r3, [r3, #8]
 8000946:	4619      	mov	r1, r3
 8000948:	f7ff fe96 	bl	8000678 <HAL_GPIO_DeInit>
	for (i = 0; i < sz /* CONF_TOTAL_APP_PIN */ ; i++)
 800094c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000950:	3301      	adds	r3, #1
 8000952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	d8de      	bhi.n	800091e <Gpio_hal_init+0x32>
	}

	for (i = 0; i < sz /* CONF_TOTAL_APP_PIN */ ; i++)
 8000960:	2300      	movs	r3, #0
 8000962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000966:	e0bc      	b.n	8000ae2 <Gpio_hal_init+0x1f6>
	{

		if ((gpio_hal_port_t)handle[i].port == GPIOA)
 8000968:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800096c:	4613      	mov	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	4413      	add	r3, r2
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	461a      	mov	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	4a60      	ldr	r2, [pc, #384]	; (8000b00 <Gpio_hal_init+0x214>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d10b      	bne.n	800099a <Gpio_hal_init+0xae>
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b60      	ldr	r3, [pc, #384]	; (8000b04 <Gpio_hal_init+0x218>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a5f      	ldr	r2, [pc, #380]	; (8000b04 <Gpio_hal_init+0x218>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6193      	str	r3, [r2, #24]
 800098e:	4b5d      	ldr	r3, [pc, #372]	; (8000b04 <Gpio_hal_init+0x218>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	61bb      	str	r3, [r7, #24]
 8000998:	69bb      	ldr	r3, [r7, #24]
		if ((gpio_hal_port_t)handle[i].port == GPIOB)
 800099a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800099e:	4613      	mov	r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	4413      	add	r3, r2
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	461a      	mov	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	4a56      	ldr	r2, [pc, #344]	; (8000b08 <Gpio_hal_init+0x21c>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d10b      	bne.n	80009cc <Gpio_hal_init+0xe0>
			__HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	4b53      	ldr	r3, [pc, #332]	; (8000b04 <Gpio_hal_init+0x218>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a52      	ldr	r2, [pc, #328]	; (8000b04 <Gpio_hal_init+0x218>)
 80009ba:	f043 0308 	orr.w	r3, r3, #8
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b50      	ldr	r3, [pc, #320]	; (8000b04 <Gpio_hal_init+0x218>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0308 	and.w	r3, r3, #8
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	697b      	ldr	r3, [r7, #20]
		if ((gpio_hal_port_t)handle[i].port == GPIOC)
 80009cc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	461a      	mov	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	4a4a      	ldr	r2, [pc, #296]	; (8000b0c <Gpio_hal_init+0x220>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d10b      	bne.n	80009fe <Gpio_hal_init+0x112>
			__HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <Gpio_hal_init+0x218>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	4a46      	ldr	r2, [pc, #280]	; (8000b04 <Gpio_hal_init+0x218>)
 80009ec:	f043 0310 	orr.w	r3, r3, #16
 80009f0:	6193      	str	r3, [r2, #24]
 80009f2:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <Gpio_hal_init+0x218>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	f003 0310 	and.w	r3, r3, #16
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]
		if ((gpio_hal_port_t)handle[i].port == GPIOD)
 80009fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a02:	4613      	mov	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4413      	add	r3, r2
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	4a3f      	ldr	r2, [pc, #252]	; (8000b10 <Gpio_hal_init+0x224>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d10b      	bne.n	8000a30 <Gpio_hal_init+0x144>
			__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a18:	4b3a      	ldr	r3, [pc, #232]	; (8000b04 <Gpio_hal_init+0x218>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a39      	ldr	r2, [pc, #228]	; (8000b04 <Gpio_hal_init+0x218>)
 8000a1e:	f043 0320 	orr.w	r3, r3, #32
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <Gpio_hal_init+0x218>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]

		HAL_GPIO_WritePin(handle[i].port, handle[i].pin, handle[i].val); // reason: was initialized first time in the CubeMX generated code example
 8000a30:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a34:	4613      	mov	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4413      	add	r3, r2
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	6858      	ldr	r0, [r3, #4]
 8000a44:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	461a      	mov	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	8919      	ldrh	r1, [r3, #8]
 8000a58:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4413      	add	r3, r2
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	461a      	mov	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	7d1b      	ldrb	r3, [r3, #20]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	f7ff febf 	bl	80007f0 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Mode = handle[i].mode_io;
 8000a72:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4413      	add	r3, r2
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pin = handle[i].pin;
 8000a88:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	461a      	mov	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	891b      	ldrh	r3, [r3, #8]
 8000a9c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = handle[i].mode_pull; 
 8000a9e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	461a      	mov	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	691b      	ldr	r3, [r3, #16]
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // metti API per gestire funzioni particolari
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(handle[i].port, &GPIO_InitStruct);
 8000ab8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000abc:	4613      	mov	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	00db      	lsls	r3, r3, #3
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f107 021c 	add.w	r2, r7, #28
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fc76 	bl	80003c4 <HAL_GPIO_Init>
	for (i = 0; i < sz /* CONF_TOTAL_APP_PIN */ ; i++)
 8000ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000adc:	3301      	adds	r3, #1
 8000ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	f63f af3d 	bhi.w	8000968 <Gpio_hal_init+0x7c>

	}
}
 8000aee:	bf00      	nop
 8000af0:	3730      	adds	r7, #48	; 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000044 	.word	0x20000044
 8000afc:	20000040 	.word	0x20000040
 8000b00:	40010800 	.word	0x40010800
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010c00 	.word	0x40010c00
 8000b0c:	40011000 	.word	0x40011000
 8000b10:	40011400 	.word	0x40011400

08000b14 <Core_hal_init>:
#include <stm32f1xx_hal.h>
#include <wrappers/hal.h>

void Core_hal_init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 8000b1a:	f7ff fb29 	bl	8000170 <HAL_Init>

	  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <Core_hal_init+0x60>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <Core_hal_init+0x60>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6193      	str	r3, [r2, #24]
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <Core_hal_init+0x60>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <Core_hal_init+0x60>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <Core_hal_init+0x60>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b40:	61d3      	str	r3, [r2, #28]
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <Core_hal_init+0x60>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

	  /* System interrupt init*/

	  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	  */
	  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <Core_hal_init+0x64>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <Core_hal_init+0x64>)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	6053      	str	r3, [r2, #4]

}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010000 	.word	0x40010000

08000b7c <I2C1_EV_IRQHandler>:
	isr_pt_array[irq_i].state = INTERRUPT_UNASSIGNED;         
}


void I2C1_EV_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  isr_pt_array[I2C1_EV_IRQHandler_num].isr_pt();
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <I2C1_EV_IRQHandler+0x10>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4798      	blx	r3
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000048 	.word	0x20000048

08000b90 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{ 
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  isr_pt_array[I2C1_ER_IRQHandler_num].isr_pt();
 8000b94:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <I2C1_ER_IRQHandler+0x10>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	4798      	blx	r3
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000048 	.word	0x20000048

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <HardFault_Handler+0x4>

08000bb6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <MemManage_Handler+0x4>

08000bbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <BusFault_Handler+0x4>

08000bc2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <UsageFault_Handler+0x4>

08000bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
 // HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	Core_hal_init();
 8000bfc:	f7ff ff8a 	bl	8000b14 <Core_hal_init>
	Gpio_hal_init(gpio_hal_conf, CONF_TOTAL_APP_PIN);
 8000c00:	2101      	movs	r1, #1
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <main+0x24>)
 8000c04:	f7ff fe72 	bl	80008ec <Gpio_hal_init>
	Gpio_hal_set_value(DEBUG_LED, GPIO_HIGH);
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f7ff fe42 	bl	8000894 <Gpio_hal_set_value>
	Gpio_hal_set_value(DEBUG_LED, GPIO_LOW);
 8000c10:	2100      	movs	r1, #0
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fe3e 	bl	8000894 <Gpio_hal_set_value>

	for(;;);
 8000c18:	e7fe      	b.n	8000c18 <main+0x20>
 8000c1a:	bf00      	nop
 8000c1c:	2000000c 	.word	0x2000000c

08000c20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c26:	490e      	ldr	r1, [pc, #56]	; (8000c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <LoopForever+0xe>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c3c:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <LoopForever+0x16>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c4a:	f7ff fdef 	bl	800082c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c4e:	f000 f811 	bl	8000c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c52:	f7ff ffd1 	bl	8000bf8 <main>

08000c56 <LoopForever>:

LoopForever:
    b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
  ldr   r0, =_estack
 8000c58:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000c64:	08000cdc 	.word	0x08000cdc
  ldr r2, =_sbss
 8000c68:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000c6c:	20000118 	.word	0x20000118

08000c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_2_IRQHandler>
	...

08000c74 <__libc_init_array>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	2500      	movs	r5, #0
 8000c78:	4e0c      	ldr	r6, [pc, #48]	; (8000cac <__libc_init_array+0x38>)
 8000c7a:	4c0d      	ldr	r4, [pc, #52]	; (8000cb0 <__libc_init_array+0x3c>)
 8000c7c:	1ba4      	subs	r4, r4, r6
 8000c7e:	10a4      	asrs	r4, r4, #2
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	d109      	bne.n	8000c98 <__libc_init_array+0x24>
 8000c84:	f000 f81a 	bl	8000cbc <_init>
 8000c88:	2500      	movs	r5, #0
 8000c8a:	4e0a      	ldr	r6, [pc, #40]	; (8000cb4 <__libc_init_array+0x40>)
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <__libc_init_array+0x44>)
 8000c8e:	1ba4      	subs	r4, r4, r6
 8000c90:	10a4      	asrs	r4, r4, #2
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	d105      	bne.n	8000ca2 <__libc_init_array+0x2e>
 8000c96:	bd70      	pop	{r4, r5, r6, pc}
 8000c98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c9c:	4798      	blx	r3
 8000c9e:	3501      	adds	r5, #1
 8000ca0:	e7ee      	b.n	8000c80 <__libc_init_array+0xc>
 8000ca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ca6:	4798      	blx	r3
 8000ca8:	3501      	adds	r5, #1
 8000caa:	e7f2      	b.n	8000c92 <__libc_init_array+0x1e>
 8000cac:	08000cd4 	.word	0x08000cd4
 8000cb0:	08000cd4 	.word	0x08000cd4
 8000cb4:	08000cd4 	.word	0x08000cd4
 8000cb8:	08000cd8 	.word	0x08000cd8

08000cbc <_init>:
 8000cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cbe:	bf00      	nop
 8000cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cc2:	bc08      	pop	{r3}
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	4770      	bx	lr

08000cc8 <_fini>:
 8000cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cca:	bf00      	nop
 8000ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cce:	bc08      	pop	{r3}
 8000cd0:	469e      	mov	lr, r3
 8000cd2:	4770      	bx	lr
