
core_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08003320  08003320  00013320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003424  08003424  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003424  08003424  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003424  08003424  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003424  08003424  00013424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003428  08003428  00013428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800342c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000010  0800343c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  0800343c  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c681  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e4f  00000000  00000000  0002c6ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a80  00000000  00000000  0002e510  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a0  00000000  00000000  0002ef90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003d62  00000000  00000000  0002f930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000afe1  00000000  00000000  00033692  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072938  00000000  00000000  0003e673  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b0fab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a4  00000000  00000000  000b1028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08003308 	.word	0x08003308

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08003308 	.word	0x08003308

08000170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	4b08      	ldr	r3, [pc, #32]	; (8000198 <HAL_Init+0x28>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a07      	ldr	r2, [pc, #28]	; (8000198 <HAL_Init+0x28>)
 800017a:	f043 0310 	orr.w	r3, r3, #16
 800017e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000180:	2003      	movs	r0, #3
 8000182:	f000 f911 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f000 f808 	bl	800019c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800018c:	f000 fb7c 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	40022000 	.word	0x40022000

0800019c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001a4:	4b12      	ldr	r3, [pc, #72]	; (80001f0 <HAL_InitTick+0x54>)
 80001a6:	681a      	ldr	r2, [r3, #0]
 80001a8:	4b12      	ldr	r3, [pc, #72]	; (80001f4 <HAL_InitTick+0x58>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	4619      	mov	r1, r3
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80001b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 f929 	bl	8000412 <HAL_SYSTICK_Config>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001c6:	2301      	movs	r3, #1
 80001c8:	e00e      	b.n	80001e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2b0f      	cmp	r3, #15
 80001ce:	d80a      	bhi.n	80001e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001d0:	2200      	movs	r2, #0
 80001d2:	6879      	ldr	r1, [r7, #4]
 80001d4:	f04f 30ff 	mov.w	r0, #4294967295
 80001d8:	f000 f8f1 	bl	80003be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001dc:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <HAL_InitTick+0x5c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001e2:	2300      	movs	r3, #0
 80001e4:	e000      	b.n	80001e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001e6:	2301      	movs	r3, #1
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000008 	.word	0x20000008
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000000 	.word	0x20000000

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000021c 	.word	0x2000021c

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4906      	ldr	r1, [pc, #24]	; (80002a8 <__NVIC_EnableIRQ+0x34>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3b01      	subs	r3, #1
 8000370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000374:	d301      	bcc.n	800037a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000376:	2301      	movs	r3, #1
 8000378:	e00f      	b.n	800039a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <SysTick_Config+0x40>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000382:	210f      	movs	r1, #15
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f7ff ff90 	bl	80002ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SysTick_Config+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SysTick_Config+0x40>)
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010

080003a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff2d 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d0:	f7ff ff42 	bl	8000258 <__NVIC_GetPriorityGrouping>
 80003d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff90 	bl	8000300 <NVIC_EncodePriority>
 80003e0:	4602      	mov	r2, r0
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff5f 	bl	80002ac <__NVIC_SetPriority>
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff35 	bl	8000274 <__NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffa2 	bl	8000364 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800042c:	b480      	push	{r7}
 800042e:	b08b      	sub	sp, #44	; 0x2c
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000436:	2300      	movs	r3, #0
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800043e:	e127      	b.n	8000690 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000440:	2201      	movs	r2, #1
 8000442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	69fa      	ldr	r2, [r7, #28]
 8000450:	4013      	ands	r3, r2
 8000452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000454:	69ba      	ldr	r2, [r7, #24]
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	429a      	cmp	r2, r3
 800045a:	f040 8116 	bne.w	800068a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	2b12      	cmp	r3, #18
 8000464:	d034      	beq.n	80004d0 <HAL_GPIO_Init+0xa4>
 8000466:	2b12      	cmp	r3, #18
 8000468:	d80d      	bhi.n	8000486 <HAL_GPIO_Init+0x5a>
 800046a:	2b02      	cmp	r3, #2
 800046c:	d02b      	beq.n	80004c6 <HAL_GPIO_Init+0x9a>
 800046e:	2b02      	cmp	r3, #2
 8000470:	d804      	bhi.n	800047c <HAL_GPIO_Init+0x50>
 8000472:	2b00      	cmp	r3, #0
 8000474:	d031      	beq.n	80004da <HAL_GPIO_Init+0xae>
 8000476:	2b01      	cmp	r3, #1
 8000478:	d01c      	beq.n	80004b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800047a:	e048      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800047c:	2b03      	cmp	r3, #3
 800047e:	d043      	beq.n	8000508 <HAL_GPIO_Init+0xdc>
 8000480:	2b11      	cmp	r3, #17
 8000482:	d01b      	beq.n	80004bc <HAL_GPIO_Init+0x90>
          break;
 8000484:	e043      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000486:	4a89      	ldr	r2, [pc, #548]	; (80006ac <HAL_GPIO_Init+0x280>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d026      	beq.n	80004da <HAL_GPIO_Init+0xae>
 800048c:	4a87      	ldr	r2, [pc, #540]	; (80006ac <HAL_GPIO_Init+0x280>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d806      	bhi.n	80004a0 <HAL_GPIO_Init+0x74>
 8000492:	4a87      	ldr	r2, [pc, #540]	; (80006b0 <HAL_GPIO_Init+0x284>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d020      	beq.n	80004da <HAL_GPIO_Init+0xae>
 8000498:	4a86      	ldr	r2, [pc, #536]	; (80006b4 <HAL_GPIO_Init+0x288>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d01d      	beq.n	80004da <HAL_GPIO_Init+0xae>
          break;
 800049e:	e036      	b.n	800050e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004a0:	4a85      	ldr	r2, [pc, #532]	; (80006b8 <HAL_GPIO_Init+0x28c>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d019      	beq.n	80004da <HAL_GPIO_Init+0xae>
 80004a6:	4a85      	ldr	r2, [pc, #532]	; (80006bc <HAL_GPIO_Init+0x290>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d016      	beq.n	80004da <HAL_GPIO_Init+0xae>
 80004ac:	4a84      	ldr	r2, [pc, #528]	; (80006c0 <HAL_GPIO_Init+0x294>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d013      	beq.n	80004da <HAL_GPIO_Init+0xae>
          break;
 80004b2:	e02c      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	623b      	str	r3, [r7, #32]
          break;
 80004ba:	e028      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	3304      	adds	r3, #4
 80004c2:	623b      	str	r3, [r7, #32]
          break;
 80004c4:	e023      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	3308      	adds	r3, #8
 80004cc:	623b      	str	r3, [r7, #32]
          break;
 80004ce:	e01e      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	330c      	adds	r3, #12
 80004d6:	623b      	str	r3, [r7, #32]
          break;
 80004d8:	e019      	b.n	800050e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d102      	bne.n	80004e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004e2:	2304      	movs	r3, #4
 80004e4:	623b      	str	r3, [r7, #32]
          break;
 80004e6:	e012      	b.n	800050e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d105      	bne.n	80004fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f0:	2308      	movs	r3, #8
 80004f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	69fa      	ldr	r2, [r7, #28]
 80004f8:	611a      	str	r2, [r3, #16]
          break;
 80004fa:	e008      	b.n	800050e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fc:	2308      	movs	r3, #8
 80004fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	69fa      	ldr	r2, [r7, #28]
 8000504:	615a      	str	r2, [r3, #20]
          break;
 8000506:	e002      	b.n	800050e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000508:	2300      	movs	r3, #0
 800050a:	623b      	str	r3, [r7, #32]
          break;
 800050c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d801      	bhi.n	8000518 <HAL_GPIO_Init+0xec>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	e001      	b.n	800051c <HAL_GPIO_Init+0xf0>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3304      	adds	r3, #4
 800051c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	2bff      	cmp	r3, #255	; 0xff
 8000522:	d802      	bhi.n	800052a <HAL_GPIO_Init+0xfe>
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	e002      	b.n	8000530 <HAL_GPIO_Init+0x104>
 800052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052c:	3b08      	subs	r3, #8
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	210f      	movs	r1, #15
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	401a      	ands	r2, r3
 8000542:	6a39      	ldr	r1, [r7, #32]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	2b00      	cmp	r3, #0
 800055a:	f000 8096 	beq.w	800068a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b59      	ldr	r3, [pc, #356]	; (80006c4 <HAL_GPIO_Init+0x298>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a58      	ldr	r2, [pc, #352]	; (80006c4 <HAL_GPIO_Init+0x298>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b56      	ldr	r3, [pc, #344]	; (80006c4 <HAL_GPIO_Init+0x298>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000576:	4a54      	ldr	r2, [pc, #336]	; (80006c8 <HAL_GPIO_Init+0x29c>)
 8000578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057a:	089b      	lsrs	r3, r3, #2
 800057c:	3302      	adds	r3, #2
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	220f      	movs	r2, #15
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	4013      	ands	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a4b      	ldr	r2, [pc, #300]	; (80006cc <HAL_GPIO_Init+0x2a0>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d013      	beq.n	80005ca <HAL_GPIO_Init+0x19e>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a4a      	ldr	r2, [pc, #296]	; (80006d0 <HAL_GPIO_Init+0x2a4>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d00d      	beq.n	80005c6 <HAL_GPIO_Init+0x19a>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a49      	ldr	r2, [pc, #292]	; (80006d4 <HAL_GPIO_Init+0x2a8>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d007      	beq.n	80005c2 <HAL_GPIO_Init+0x196>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a48      	ldr	r2, [pc, #288]	; (80006d8 <HAL_GPIO_Init+0x2ac>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_GPIO_Init+0x192>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e006      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005be:	2304      	movs	r3, #4
 80005c0:	e004      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005c2:	2302      	movs	r3, #2
 80005c4:	e002      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <HAL_GPIO_Init+0x1a0>
 80005ca:	2300      	movs	r3, #0
 80005cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ce:	f002 0203 	and.w	r2, r2, #3
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	4093      	lsls	r3, r2
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	4313      	orrs	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005dc:	493a      	ldr	r1, [pc, #232]	; (80006c8 <HAL_GPIO_Init+0x29c>)
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	089b      	lsrs	r3, r3, #2
 80005e2:	3302      	adds	r3, #2
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005f6:	4b39      	ldr	r3, [pc, #228]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4938      	ldr	r1, [pc, #224]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	4313      	orrs	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
 8000602:	e006      	b.n	8000612 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000604:	4b35      	ldr	r3, [pc, #212]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	43db      	mvns	r3, r3
 800060c:	4933      	ldr	r1, [pc, #204]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800060e:	4013      	ands	r3, r2
 8000610:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d006      	beq.n	800062c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	4313      	orrs	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
 800062a:	e006      	b.n	800063a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800062e:	685a      	ldr	r2, [r3, #4]
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	43db      	mvns	r3, r3
 8000634:	4929      	ldr	r1, [pc, #164]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000636:	4013      	ands	r3, r2
 8000638:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	4924      	ldr	r1, [pc, #144]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	4313      	orrs	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
 8000652:	e006      	b.n	8000662 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	43db      	mvns	r3, r3
 800065c:	491f      	ldr	r1, [pc, #124]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800065e:	4013      	ands	r3, r2
 8000660:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	491a      	ldr	r1, [pc, #104]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	4313      	orrs	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
 800067a:	e006      	b.n	800068a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	43db      	mvns	r3, r3
 8000684:	4915      	ldr	r1, [pc, #84]	; (80006dc <HAL_GPIO_Init+0x2b0>)
 8000686:	4013      	ands	r3, r2
 8000688:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	3301      	adds	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000696:	fa22 f303 	lsr.w	r3, r2, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	f47f aed0 	bne.w	8000440 <HAL_GPIO_Init+0x14>
  }
}
 80006a0:	bf00      	nop
 80006a2:	372c      	adds	r7, #44	; 0x2c
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	10210000 	.word	0x10210000
 80006b0:	10110000 	.word	0x10110000
 80006b4:	10120000 	.word	0x10120000
 80006b8:	10310000 	.word	0x10310000
 80006bc:	10320000 	.word	0x10320000
 80006c0:	10220000 	.word	0x10220000
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000
 80006cc:	40010800 	.word	0x40010800
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	40011000 	.word	0x40011000
 80006d8:	40011400 	.word	0x40011400
 80006dc:	40010400 	.word	0x40010400

080006e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b089      	sub	sp, #36	; 0x24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80006ee:	e09a      	b.n	8000826 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80006f0:	2201      	movs	r2, #1
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	4013      	ands	r3, r2
 80006fc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	2b00      	cmp	r3, #0
 8000702:	f000 808d 	beq.w	8000820 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8000706:	4a4e      	ldr	r2, [pc, #312]	; (8000840 <HAL_GPIO_DeInit+0x160>)
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	089b      	lsrs	r3, r3, #2
 800070c:	3302      	adds	r3, #2
 800070e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000712:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f003 0303 	and.w	r3, r3, #3
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	220f      	movs	r2, #15
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	4013      	ands	r3, r2
 8000726:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a46      	ldr	r2, [pc, #280]	; (8000844 <HAL_GPIO_DeInit+0x164>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d013      	beq.n	8000758 <HAL_GPIO_DeInit+0x78>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a45      	ldr	r2, [pc, #276]	; (8000848 <HAL_GPIO_DeInit+0x168>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d00d      	beq.n	8000754 <HAL_GPIO_DeInit+0x74>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a44      	ldr	r2, [pc, #272]	; (800084c <HAL_GPIO_DeInit+0x16c>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d007      	beq.n	8000750 <HAL_GPIO_DeInit+0x70>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a43      	ldr	r2, [pc, #268]	; (8000850 <HAL_GPIO_DeInit+0x170>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d101      	bne.n	800074c <HAL_GPIO_DeInit+0x6c>
 8000748:	2303      	movs	r3, #3
 800074a:	e006      	b.n	800075a <HAL_GPIO_DeInit+0x7a>
 800074c:	2304      	movs	r3, #4
 800074e:	e004      	b.n	800075a <HAL_GPIO_DeInit+0x7a>
 8000750:	2302      	movs	r3, #2
 8000752:	e002      	b.n	800075a <HAL_GPIO_DeInit+0x7a>
 8000754:	2301      	movs	r3, #1
 8000756:	e000      	b.n	800075a <HAL_GPIO_DeInit+0x7a>
 8000758:	2300      	movs	r3, #0
 800075a:	69fa      	ldr	r2, [r7, #28]
 800075c:	f002 0203 	and.w	r2, r2, #3
 8000760:	0092      	lsls	r2, r2, #2
 8000762:	4093      	lsls	r3, r2
 8000764:	697a      	ldr	r2, [r7, #20]
 8000766:	429a      	cmp	r2, r3
 8000768:	d132      	bne.n	80007d0 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	f003 0303 	and.w	r3, r3, #3
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	220f      	movs	r2, #15
 8000774:	fa02 f303 	lsl.w	r3, r2, r3
 8000778:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800077a:	4a31      	ldr	r2, [pc, #196]	; (8000840 <HAL_GPIO_DeInit+0x160>)
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	089b      	lsrs	r3, r3, #2
 8000780:	3302      	adds	r3, #2
 8000782:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	43da      	mvns	r2, r3
 800078a:	482d      	ldr	r0, [pc, #180]	; (8000840 <HAL_GPIO_DeInit+0x160>)
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	089b      	lsrs	r3, r3, #2
 8000790:	400a      	ands	r2, r1
 8000792:	3302      	adds	r3, #2
 8000794:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000798:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <HAL_GPIO_DeInit+0x174>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	43db      	mvns	r3, r3
 80007a0:	492c      	ldr	r1, [pc, #176]	; (8000854 <HAL_GPIO_DeInit+0x174>)
 80007a2:	4013      	ands	r3, r2
 80007a4:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80007a6:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <HAL_GPIO_DeInit+0x174>)
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	43db      	mvns	r3, r3
 80007ae:	4929      	ldr	r1, [pc, #164]	; (8000854 <HAL_GPIO_DeInit+0x174>)
 80007b0:	4013      	ands	r3, r2
 80007b2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <HAL_GPIO_DeInit+0x174>)
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	43db      	mvns	r3, r3
 80007bc:	4925      	ldr	r1, [pc, #148]	; (8000854 <HAL_GPIO_DeInit+0x174>)
 80007be:	4013      	ands	r3, r2
 80007c0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <HAL_GPIO_DeInit+0x174>)
 80007c4:	68da      	ldr	r2, [r3, #12]
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	43db      	mvns	r3, r3
 80007ca:	4922      	ldr	r1, [pc, #136]	; (8000854 <HAL_GPIO_DeInit+0x174>)
 80007cc:	4013      	ands	r3, r2
 80007ce:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	2bff      	cmp	r3, #255	; 0xff
 80007d4:	d801      	bhi.n	80007da <HAL_GPIO_DeInit+0xfa>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	e001      	b.n	80007de <HAL_GPIO_DeInit+0xfe>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3304      	adds	r3, #4
 80007de:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	2bff      	cmp	r3, #255	; 0xff
 80007e4:	d802      	bhi.n	80007ec <HAL_GPIO_DeInit+0x10c>
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	e002      	b.n	80007f2 <HAL_GPIO_DeInit+0x112>
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	3b08      	subs	r3, #8
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	210f      	movs	r1, #15
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	401a      	ands	r2, r3
 8000804:	2104      	movs	r1, #4
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	fa01 f303 	lsl.w	r3, r1, r3
 800080c:	431a      	orrs	r2, r3
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	68da      	ldr	r2, [r3, #12]
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	43db      	mvns	r3, r3
 800081a:	401a      	ands	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	3301      	adds	r3, #1
 8000824:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	fa22 f303 	lsr.w	r3, r2, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	f47f af5e 	bne.w	80006f0 <HAL_GPIO_DeInit+0x10>
  }
}
 8000834:	bf00      	nop
 8000836:	3724      	adds	r7, #36	; 0x24
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40010000 	.word	0x40010000
 8000844:	40010800 	.word	0x40010800
 8000848:	40010c00 	.word	0x40010c00
 800084c:	40011000 	.word	0x40011000
 8000850:	40011400 	.word	0x40011400
 8000854:	40010400 	.word	0x40010400

08000858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	807b      	strh	r3, [r7, #2]
 8000864:	4613      	mov	r3, r2
 8000866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000868:	787b      	ldrb	r3, [r7, #1]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d003      	beq.n	8000876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800086e:	887a      	ldrh	r2, [r7, #2]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000874:	e003      	b.n	800087e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000876:	887b      	ldrh	r3, [r7, #2]
 8000878:	041a      	lsls	r2, r3, #16
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	611a      	str	r2, [r3, #16]
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d101      	bne.n	80008a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e26c      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	f000 8087 	beq.w	80009c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80008b4:	4b92      	ldr	r3, [pc, #584]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	f003 030c 	and.w	r3, r3, #12
 80008bc:	2b04      	cmp	r3, #4
 80008be:	d00c      	beq.n	80008da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008c0:	4b8f      	ldr	r3, [pc, #572]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f003 030c 	and.w	r3, r3, #12
 80008c8:	2b08      	cmp	r3, #8
 80008ca:	d112      	bne.n	80008f2 <HAL_RCC_OscConfig+0x5e>
 80008cc:	4b8c      	ldr	r3, [pc, #560]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008d8:	d10b      	bne.n	80008f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008da:	4b89      	ldr	r3, [pc, #548]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d06c      	beq.n	80009c0 <HAL_RCC_OscConfig+0x12c>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d168      	bne.n	80009c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e246      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008fa:	d106      	bne.n	800090a <HAL_RCC_OscConfig+0x76>
 80008fc:	4b80      	ldr	r3, [pc, #512]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a7f      	ldr	r2, [pc, #508]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	e02e      	b.n	8000968 <HAL_RCC_OscConfig+0xd4>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10c      	bne.n	800092c <HAL_RCC_OscConfig+0x98>
 8000912:	4b7b      	ldr	r3, [pc, #492]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a7a      	ldr	r2, [pc, #488]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800091c:	6013      	str	r3, [r2, #0]
 800091e:	4b78      	ldr	r3, [pc, #480]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a77      	ldr	r2, [pc, #476]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	e01d      	b.n	8000968 <HAL_RCC_OscConfig+0xd4>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000934:	d10c      	bne.n	8000950 <HAL_RCC_OscConfig+0xbc>
 8000936:	4b72      	ldr	r3, [pc, #456]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a71      	ldr	r2, [pc, #452]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 800093c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000940:	6013      	str	r3, [r2, #0]
 8000942:	4b6f      	ldr	r3, [pc, #444]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a6e      	ldr	r2, [pc, #440]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e00b      	b.n	8000968 <HAL_RCC_OscConfig+0xd4>
 8000950:	4b6b      	ldr	r3, [pc, #428]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a6a      	ldr	r2, [pc, #424]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	4b68      	ldr	r3, [pc, #416]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a67      	ldr	r2, [pc, #412]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000966:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d013      	beq.n	8000998 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000970:	f7ff fc44 	bl	80001fc <HAL_GetTick>
 8000974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000976:	e008      	b.n	800098a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000978:	f7ff fc40 	bl	80001fc <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	2b64      	cmp	r3, #100	; 0x64
 8000984:	d901      	bls.n	800098a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000986:	2303      	movs	r3, #3
 8000988:	e1fa      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098a:	4b5d      	ldr	r3, [pc, #372]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f0      	beq.n	8000978 <HAL_RCC_OscConfig+0xe4>
 8000996:	e014      	b.n	80009c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000998:	f7ff fc30 	bl	80001fc <HAL_GetTick>
 800099c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800099e:	e008      	b.n	80009b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009a0:	f7ff fc2c 	bl	80001fc <HAL_GetTick>
 80009a4:	4602      	mov	r2, r0
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	2b64      	cmp	r3, #100	; 0x64
 80009ac:	d901      	bls.n	80009b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80009ae:	2303      	movs	r3, #3
 80009b0:	e1e6      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009b2:	4b53      	ldr	r3, [pc, #332]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1f0      	bne.n	80009a0 <HAL_RCC_OscConfig+0x10c>
 80009be:	e000      	b.n	80009c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d063      	beq.n	8000a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80009ce:	4b4c      	ldr	r3, [pc, #304]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 030c 	and.w	r3, r3, #12
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00b      	beq.n	80009f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009da:	4b49      	ldr	r3, [pc, #292]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 030c 	and.w	r3, r3, #12
 80009e2:	2b08      	cmp	r3, #8
 80009e4:	d11c      	bne.n	8000a20 <HAL_RCC_OscConfig+0x18c>
 80009e6:	4b46      	ldr	r3, [pc, #280]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d116      	bne.n	8000a20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009f2:	4b43      	ldr	r3, [pc, #268]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d005      	beq.n	8000a0a <HAL_RCC_OscConfig+0x176>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	691b      	ldr	r3, [r3, #16]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d001      	beq.n	8000a0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e1ba      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a0a:	4b3d      	ldr	r3, [pc, #244]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	4939      	ldr	r1, [pc, #228]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a1e:	e03a      	b.n	8000a96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d020      	beq.n	8000a6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a28:	4b36      	ldr	r3, [pc, #216]	; (8000b04 <HAL_RCC_OscConfig+0x270>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a2e:	f7ff fbe5 	bl	80001fc <HAL_GetTick>
 8000a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a34:	e008      	b.n	8000a48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a36:	f7ff fbe1 	bl	80001fc <HAL_GetTick>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d901      	bls.n	8000a48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000a44:	2303      	movs	r3, #3
 8000a46:	e19b      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a48:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0f0      	beq.n	8000a36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	4927      	ldr	r1, [pc, #156]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000a64:	4313      	orrs	r3, r2
 8000a66:	600b      	str	r3, [r1, #0]
 8000a68:	e015      	b.n	8000a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a6a:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <HAL_RCC_OscConfig+0x270>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a70:	f7ff fbc4 	bl	80001fc <HAL_GetTick>
 8000a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a76:	e008      	b.n	8000a8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a78:	f7ff fbc0 	bl	80001fc <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d901      	bls.n	8000a8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000a86:	2303      	movs	r3, #3
 8000a88:	e17a      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1f0      	bne.n	8000a78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d03a      	beq.n	8000b18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d019      	beq.n	8000ade <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_RCC_OscConfig+0x274>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ab0:	f7ff fba4 	bl	80001fc <HAL_GetTick>
 8000ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ab6:	e008      	b.n	8000aca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ab8:	f7ff fba0 	bl	80001fc <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d901      	bls.n	8000aca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e15a      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_RCC_OscConfig+0x26c>)
 8000acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0f0      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 fab4 	bl	8001044 <RCC_Delay>
 8000adc:	e01c      	b.n	8000b18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_RCC_OscConfig+0x274>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ae4:	f7ff fb8a 	bl	80001fc <HAL_GetTick>
 8000ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aea:	e00f      	b.n	8000b0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000aec:	f7ff fb86 	bl	80001fc <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d908      	bls.n	8000b0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000afa:	2303      	movs	r3, #3
 8000afc:	e140      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000
 8000b04:	42420000 	.word	0x42420000
 8000b08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b0c:	4b9e      	ldr	r3, [pc, #632]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1e9      	bne.n	8000aec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	f000 80a6 	beq.w	8000c72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b2a:	4b97      	ldr	r3, [pc, #604]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10d      	bne.n	8000b52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	4b94      	ldr	r3, [pc, #592]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	4a93      	ldr	r2, [pc, #588]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b40:	61d3      	str	r3, [r2, #28]
 8000b42:	4b91      	ldr	r3, [pc, #580]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b52:	4b8e      	ldr	r3, [pc, #568]	; (8000d8c <HAL_RCC_OscConfig+0x4f8>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d118      	bne.n	8000b90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b5e:	4b8b      	ldr	r3, [pc, #556]	; (8000d8c <HAL_RCC_OscConfig+0x4f8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a8a      	ldr	r2, [pc, #552]	; (8000d8c <HAL_RCC_OscConfig+0x4f8>)
 8000b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b6a:	f7ff fb47 	bl	80001fc <HAL_GetTick>
 8000b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b70:	e008      	b.n	8000b84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b72:	f7ff fb43 	bl	80001fc <HAL_GetTick>
 8000b76:	4602      	mov	r2, r0
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	2b64      	cmp	r3, #100	; 0x64
 8000b7e:	d901      	bls.n	8000b84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000b80:	2303      	movs	r3, #3
 8000b82:	e0fd      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b84:	4b81      	ldr	r3, [pc, #516]	; (8000d8c <HAL_RCC_OscConfig+0x4f8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0f0      	beq.n	8000b72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d106      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x312>
 8000b98:	4b7b      	ldr	r3, [pc, #492]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000b9a:	6a1b      	ldr	r3, [r3, #32]
 8000b9c:	4a7a      	ldr	r2, [pc, #488]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6213      	str	r3, [r2, #32]
 8000ba4:	e02d      	b.n	8000c02 <HAL_RCC_OscConfig+0x36e>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10c      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x334>
 8000bae:	4b76      	ldr	r3, [pc, #472]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000bb0:	6a1b      	ldr	r3, [r3, #32]
 8000bb2:	4a75      	ldr	r2, [pc, #468]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6213      	str	r3, [r2, #32]
 8000bba:	4b73      	ldr	r3, [pc, #460]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000bbc:	6a1b      	ldr	r3, [r3, #32]
 8000bbe:	4a72      	ldr	r2, [pc, #456]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000bc0:	f023 0304 	bic.w	r3, r3, #4
 8000bc4:	6213      	str	r3, [r2, #32]
 8000bc6:	e01c      	b.n	8000c02 <HAL_RCC_OscConfig+0x36e>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	2b05      	cmp	r3, #5
 8000bce:	d10c      	bne.n	8000bea <HAL_RCC_OscConfig+0x356>
 8000bd0:	4b6d      	ldr	r3, [pc, #436]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	4a6c      	ldr	r2, [pc, #432]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6213      	str	r3, [r2, #32]
 8000bdc:	4b6a      	ldr	r3, [pc, #424]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000bde:	6a1b      	ldr	r3, [r3, #32]
 8000be0:	4a69      	ldr	r2, [pc, #420]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6213      	str	r3, [r2, #32]
 8000be8:	e00b      	b.n	8000c02 <HAL_RCC_OscConfig+0x36e>
 8000bea:	4b67      	ldr	r3, [pc, #412]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000bec:	6a1b      	ldr	r3, [r3, #32]
 8000bee:	4a66      	ldr	r2, [pc, #408]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000bf0:	f023 0301 	bic.w	r3, r3, #1
 8000bf4:	6213      	str	r3, [r2, #32]
 8000bf6:	4b64      	ldr	r3, [pc, #400]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000bf8:	6a1b      	ldr	r3, [r3, #32]
 8000bfa:	4a63      	ldr	r2, [pc, #396]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000bfc:	f023 0304 	bic.w	r3, r3, #4
 8000c00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d015      	beq.n	8000c36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c0a:	f7ff faf7 	bl	80001fc <HAL_GetTick>
 8000c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c10:	e00a      	b.n	8000c28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c12:	f7ff faf3 	bl	80001fc <HAL_GetTick>
 8000c16:	4602      	mov	r2, r0
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d901      	bls.n	8000c28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000c24:	2303      	movs	r3, #3
 8000c26:	e0ab      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c28:	4b57      	ldr	r3, [pc, #348]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000c2a:	6a1b      	ldr	r3, [r3, #32]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0ee      	beq.n	8000c12 <HAL_RCC_OscConfig+0x37e>
 8000c34:	e014      	b.n	8000c60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c36:	f7ff fae1 	bl	80001fc <HAL_GetTick>
 8000c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c3c:	e00a      	b.n	8000c54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c3e:	f7ff fadd 	bl	80001fc <HAL_GetTick>
 8000c42:	4602      	mov	r2, r0
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d901      	bls.n	8000c54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000c50:	2303      	movs	r3, #3
 8000c52:	e095      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c54:	4b4c      	ldr	r3, [pc, #304]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000c56:	6a1b      	ldr	r3, [r3, #32]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1ee      	bne.n	8000c3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000c60:	7dfb      	ldrb	r3, [r7, #23]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d105      	bne.n	8000c72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c66:	4b48      	ldr	r3, [pc, #288]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a47      	ldr	r2, [pc, #284]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f000 8081 	beq.w	8000d7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c7c:	4b42      	ldr	r3, [pc, #264]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 030c 	and.w	r3, r3, #12
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d061      	beq.n	8000d4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d146      	bne.n	8000d1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c90:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <HAL_RCC_OscConfig+0x4fc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c96:	f7ff fab1 	bl	80001fc <HAL_GetTick>
 8000c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c9c:	e008      	b.n	8000cb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c9e:	f7ff faad 	bl	80001fc <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d901      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000cac:	2303      	movs	r3, #3
 8000cae:	e067      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cb0:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f0      	bne.n	8000c9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a1b      	ldr	r3, [r3, #32]
 8000cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc4:	d108      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cc6:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	492d      	ldr	r1, [pc, #180]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a19      	ldr	r1, [r3, #32]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	4927      	ldr	r1, [pc, #156]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000cec:	4313      	orrs	r3, r2
 8000cee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000cf0:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <HAL_RCC_OscConfig+0x4fc>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fa81 	bl	80001fc <HAL_GetTick>
 8000cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cfe:	f7ff fa7d 	bl	80001fc <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e037      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f0      	beq.n	8000cfe <HAL_RCC_OscConfig+0x46a>
 8000d1c:	e02f      	b.n	8000d7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <HAL_RCC_OscConfig+0x4fc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d24:	f7ff fa6a 	bl	80001fc <HAL_GetTick>
 8000d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d2a:	e008      	b.n	8000d3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d2c:	f7ff fa66 	bl	80001fc <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d901      	bls.n	8000d3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e020      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1f0      	bne.n	8000d2c <HAL_RCC_OscConfig+0x498>
 8000d4a:	e018      	b.n	8000d7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d101      	bne.n	8000d58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e013      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_RCC_OscConfig+0x4f4>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a1b      	ldr	r3, [r3, #32]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d106      	bne.n	8000d7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d001      	beq.n	8000d7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40007000 	.word	0x40007000
 8000d90:	42420060 	.word	0x42420060

08000d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e0d0      	b.n	8000f4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000da8:	4b6a      	ldr	r3, [pc, #424]	; (8000f54 <HAL_RCC_ClockConfig+0x1c0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d910      	bls.n	8000dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000db6:	4b67      	ldr	r3, [pc, #412]	; (8000f54 <HAL_RCC_ClockConfig+0x1c0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f023 0207 	bic.w	r2, r3, #7
 8000dbe:	4965      	ldr	r1, [pc, #404]	; (8000f54 <HAL_RCC_ClockConfig+0x1c0>)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dc6:	4b63      	ldr	r3, [pc, #396]	; (8000f54 <HAL_RCC_ClockConfig+0x1c0>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d001      	beq.n	8000dd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e0b8      	b.n	8000f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d020      	beq.n	8000e26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d005      	beq.n	8000dfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000df0:	4b59      	ldr	r3, [pc, #356]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	4a58      	ldr	r2, [pc, #352]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000df6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000dfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0308 	and.w	r3, r3, #8
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d005      	beq.n	8000e14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e08:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	4a52      	ldr	r2, [pc, #328]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000e0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000e12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e14:	4b50      	ldr	r3, [pc, #320]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	494d      	ldr	r1, [pc, #308]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000e22:	4313      	orrs	r3, r2
 8000e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d040      	beq.n	8000eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d107      	bne.n	8000e4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3a:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d115      	bne.n	8000e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e07f      	b.n	8000f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d107      	bne.n	8000e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e52:	4b41      	ldr	r3, [pc, #260]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d109      	bne.n	8000e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e073      	b.n	8000f4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e62:	4b3d      	ldr	r3, [pc, #244]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e06b      	b.n	8000f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e72:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f023 0203 	bic.w	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	4936      	ldr	r1, [pc, #216]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000e80:	4313      	orrs	r3, r2
 8000e82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e84:	f7ff f9ba 	bl	80001fc <HAL_GetTick>
 8000e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e8a:	e00a      	b.n	8000ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e8c:	f7ff f9b6 	bl	80001fc <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e053      	b.n	8000f4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ea2:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 020c 	and.w	r2, r3, #12
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d1eb      	bne.n	8000e8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <HAL_RCC_ClockConfig+0x1c0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d210      	bcs.n	8000ee4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ec2:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <HAL_RCC_ClockConfig+0x1c0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f023 0207 	bic.w	r2, r3, #7
 8000eca:	4922      	ldr	r1, [pc, #136]	; (8000f54 <HAL_RCC_ClockConfig+0x1c0>)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ed2:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <HAL_RCC_ClockConfig+0x1c0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d001      	beq.n	8000ee4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e032      	b.n	8000f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d008      	beq.n	8000f02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	4916      	ldr	r1, [pc, #88]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000efe:	4313      	orrs	r3, r2
 8000f00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d009      	beq.n	8000f22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	490e      	ldr	r1, [pc, #56]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f22:	f000 f82d 	bl	8000f80 <HAL_RCC_GetSysClockFreq>
 8000f26:	4601      	mov	r1, r0
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_RCC_ClockConfig+0x1c4>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_RCC_ClockConfig+0x1c8>)
 8000f34:	5cd3      	ldrb	r3, [r2, r3]
 8000f36:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3a:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <HAL_RCC_ClockConfig+0x1cc>)
 8000f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_RCC_ClockConfig+0x1d0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff f92a 	bl	800019c <HAL_InitTick>

  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40022000 	.word	0x40022000
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	08003414 	.word	0x08003414
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000000 	.word	0x20000000

08000f68 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_RCC_EnableCSS+0x14>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	4242004c 	.word	0x4242004c

08000f80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f80:	b490      	push	{r4, r7}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f86:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000f88:	1d3c      	adds	r4, r7, #4
 8000f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f90:	4b28      	ldr	r3, [pc, #160]	; (8001034 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d002      	beq.n	8000fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d003      	beq.n	8000fc6 <HAL_RCC_GetSysClockFreq+0x46>
 8000fbe:	e02d      	b.n	800101c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000fc2:	623b      	str	r3, [r7, #32]
      break;
 8000fc4:	e02d      	b.n	8001022 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	0c9b      	lsrs	r3, r3, #18
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000fd8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d013      	beq.n	800100c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	0c5b      	lsrs	r3, r3, #17
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ff2:	4413      	add	r3, r2
 8000ff4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ff8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	4a0f      	ldr	r2, [pc, #60]	; (800103c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ffe:	fb02 f203 	mul.w	r2, r2, r3
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	fbb2 f3f3 	udiv	r3, r2, r3
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
 800100a:	e004      	b.n	8001016 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	4a0c      	ldr	r2, [pc, #48]	; (8001040 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001010:	fb02 f303 	mul.w	r3, r2, r3
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	623b      	str	r3, [r7, #32]
      break;
 800101a:	e002      	b.n	8001022 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <HAL_RCC_GetSysClockFreq+0xbc>)
 800101e:	623b      	str	r3, [r7, #32]
      break;
 8001020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001022:	6a3b      	ldr	r3, [r7, #32]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3728      	adds	r7, #40	; 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bc90      	pop	{r4, r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	08003320 	.word	0x08003320
 8001034:	08003330 	.word	0x08003330
 8001038:	40021000 	.word	0x40021000
 800103c:	007a1200 	.word	0x007a1200
 8001040:	003d0900 	.word	0x003d0900

08001044 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <RCC_Delay+0x34>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <RCC_Delay+0x38>)
 8001052:	fba2 2303 	umull	r2, r3, r2, r3
 8001056:	0a5b      	lsrs	r3, r3, #9
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	fb02 f303 	mul.w	r3, r2, r3
 800105e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001060:	bf00      	nop
  }
  while (Delay --);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	1e5a      	subs	r2, r3, #1
 8001066:	60fa      	str	r2, [r7, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f9      	bne.n	8001060 <RCC_Delay+0x1c>
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008
 800107c:	10624dd3 	.word	0x10624dd3

08001080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e01d      	b.n	80010ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d106      	bne.n	80010ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 f815 	bl	80010d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2202      	movs	r2, #2
 80010b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3304      	adds	r3, #4
 80010bc:	4619      	mov	r1, r3
 80010be:	4610      	mov	r0, r2
 80010c0:	f000 fb02 	bl	80016c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e01d      	b.n	8001136 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d106      	bne.n	8001114 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f815 	bl	800113e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2202      	movs	r2, #2
 8001118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3304      	adds	r3, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4610      	mov	r0, r2
 8001128:	f000 face 	bl	80016c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2201      	movs	r2, #1
 8001160:	6839      	ldr	r1, [r7, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fd30 	bl	8001bc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <HAL_TIM_OC_Start+0x60>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d107      	bne.n	8001182 <HAL_TIM_OC_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001180:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b06      	cmp	r3, #6
 8001192:	d007      	beq.n	80011a4 <HAL_TIM_OC_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40012c00 	.word	0x40012c00

080011b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e01d      	b.n	8001202 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d106      	bne.n	80011e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f815 	bl	800120a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2202      	movs	r2, #2
 80011e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3304      	adds	r3, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4610      	mov	r0, r2
 80011f4:	f000 fa68 	bl	80016c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2201      	movs	r2, #1
 800122c:	6839      	ldr	r1, [r7, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fcca 	bl	8001bc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a10      	ldr	r2, [pc, #64]	; (800127c <HAL_TIM_PWM_Start+0x60>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d107      	bne.n	800124e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800124c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2b06      	cmp	r3, #6
 800125e:	d007      	beq.n	8001270 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40012c00 	.word	0x40012c00

08001280 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e02d      	b.n	80012f0 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d106      	bne.n	80012ae <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 f825 	bl	80012f8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2202      	movs	r2, #2
 80012b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3304      	adds	r3, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	4610      	mov	r0, r2
 80012c2:	f000 fa01 	bl	80016c8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0208 	bic.w	r2, r2, #8
 80012d4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6819      	ldr	r1, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
	...

0800130c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <HAL_TIM_OC_ConfigChannel+0x1a>
 8001322:	2302      	movs	r3, #2
 8001324:	e04e      	b.n	80013c4 <HAL_TIM_OC_ConfigChannel+0xb8>
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2202      	movs	r2, #2
 8001332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0c      	cmp	r3, #12
 800133a:	d839      	bhi.n	80013b0 <HAL_TIM_OC_ConfigChannel+0xa4>
 800133c:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <HAL_TIM_OC_ConfigChannel+0x38>)
 800133e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001342:	bf00      	nop
 8001344:	08001379 	.word	0x08001379
 8001348:	080013b1 	.word	0x080013b1
 800134c:	080013b1 	.word	0x080013b1
 8001350:	080013b1 	.word	0x080013b1
 8001354:	08001387 	.word	0x08001387
 8001358:	080013b1 	.word	0x080013b1
 800135c:	080013b1 	.word	0x080013b1
 8001360:	080013b1 	.word	0x080013b1
 8001364:	08001395 	.word	0x08001395
 8001368:	080013b1 	.word	0x080013b1
 800136c:	080013b1 	.word	0x080013b1
 8001370:	080013b1 	.word	0x080013b1
 8001374:	080013a3 	.word	0x080013a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fa04 	bl	800178c <TIM_OC1_SetConfig>
      break;
 8001384:	e015      	b.n	80013b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fa63 	bl	8001858 <TIM_OC2_SetConfig>
      break;
 8001392:	e00e      	b.n	80013b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fac6 	bl	800192c <TIM_OC3_SetConfig>
      break;
 80013a0:	e007      	b.n	80013b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 fb29 	bl	8001a00 <TIM_OC4_SetConfig>
      break;
 80013ae:	e000      	b.n	80013b2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80013b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d101      	bne.n	80013e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e0b4      	b.n	8001550 <HAL_TIM_PWM_ConfigChannel+0x184>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2202      	movs	r2, #2
 80013f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0c      	cmp	r3, #12
 80013fa:	f200 809f 	bhi.w	800153c <HAL_TIM_PWM_ConfigChannel+0x170>
 80013fe:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001404:	08001439 	.word	0x08001439
 8001408:	0800153d 	.word	0x0800153d
 800140c:	0800153d 	.word	0x0800153d
 8001410:	0800153d 	.word	0x0800153d
 8001414:	08001479 	.word	0x08001479
 8001418:	0800153d 	.word	0x0800153d
 800141c:	0800153d 	.word	0x0800153d
 8001420:	0800153d 	.word	0x0800153d
 8001424:	080014bb 	.word	0x080014bb
 8001428:	0800153d 	.word	0x0800153d
 800142c:	0800153d 	.word	0x0800153d
 8001430:	0800153d 	.word	0x0800153d
 8001434:	080014fb 	.word	0x080014fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f9a4 	bl	800178c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0208 	orr.w	r2, r2, #8
 8001452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699a      	ldr	r2, [r3, #24]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0204 	bic.w	r2, r2, #4
 8001462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6999      	ldr	r1, [r3, #24]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	691a      	ldr	r2, [r3, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	619a      	str	r2, [r3, #24]
      break;
 8001476:	e062      	b.n	800153e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f9ea 	bl	8001858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699a      	ldr	r2, [r3, #24]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699a      	ldr	r2, [r3, #24]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6999      	ldr	r1, [r3, #24]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	021a      	lsls	r2, r3, #8
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	619a      	str	r2, [r3, #24]
      break;
 80014b8:	e041      	b.n	800153e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fa33 	bl	800192c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	69da      	ldr	r2, [r3, #28]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0208 	orr.w	r2, r2, #8
 80014d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	69da      	ldr	r2, [r3, #28]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0204 	bic.w	r2, r2, #4
 80014e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	69d9      	ldr	r1, [r3, #28]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	61da      	str	r2, [r3, #28]
      break;
 80014f8:	e021      	b.n	800153e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fa7d 	bl	8001a00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	69da      	ldr	r2, [r3, #28]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	69da      	ldr	r2, [r3, #28]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	69d9      	ldr	r1, [r3, #28]
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	021a      	lsls	r2, r3, #8
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	61da      	str	r2, [r3, #28]
      break;
 800153a:	e000      	b.n	800153e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800153c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_TIM_ConfigClockSource+0x18>
 800156c:	2302      	movs	r3, #2
 800156e:	e0a6      	b.n	80016be <HAL_TIM_ConfigClockSource+0x166>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800158e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001596:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b40      	cmp	r3, #64	; 0x40
 80015a6:	d067      	beq.n	8001678 <HAL_TIM_ConfigClockSource+0x120>
 80015a8:	2b40      	cmp	r3, #64	; 0x40
 80015aa:	d80b      	bhi.n	80015c4 <HAL_TIM_ConfigClockSource+0x6c>
 80015ac:	2b10      	cmp	r3, #16
 80015ae:	d073      	beq.n	8001698 <HAL_TIM_ConfigClockSource+0x140>
 80015b0:	2b10      	cmp	r3, #16
 80015b2:	d802      	bhi.n	80015ba <HAL_TIM_ConfigClockSource+0x62>
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d06f      	beq.n	8001698 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80015b8:	e078      	b.n	80016ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80015ba:	2b20      	cmp	r3, #32
 80015bc:	d06c      	beq.n	8001698 <HAL_TIM_ConfigClockSource+0x140>
 80015be:	2b30      	cmp	r3, #48	; 0x30
 80015c0:	d06a      	beq.n	8001698 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80015c2:	e073      	b.n	80016ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80015c4:	2b70      	cmp	r3, #112	; 0x70
 80015c6:	d00d      	beq.n	80015e4 <HAL_TIM_ConfigClockSource+0x8c>
 80015c8:	2b70      	cmp	r3, #112	; 0x70
 80015ca:	d804      	bhi.n	80015d6 <HAL_TIM_ConfigClockSource+0x7e>
 80015cc:	2b50      	cmp	r3, #80	; 0x50
 80015ce:	d033      	beq.n	8001638 <HAL_TIM_ConfigClockSource+0xe0>
 80015d0:	2b60      	cmp	r3, #96	; 0x60
 80015d2:	d041      	beq.n	8001658 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80015d4:	e06a      	b.n	80016ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80015d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015da:	d066      	beq.n	80016aa <HAL_TIM_ConfigClockSource+0x152>
 80015dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015e0:	d017      	beq.n	8001612 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80015e2:	e063      	b.n	80016ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	6899      	ldr	r1, [r3, #8]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f000 fac9 	bl	8001b8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001606:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	609a      	str	r2, [r3, #8]
      break;
 8001610:	e04c      	b.n	80016ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	6899      	ldr	r1, [r3, #8]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f000 fab2 	bl	8001b8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001634:	609a      	str	r2, [r3, #8]
      break;
 8001636:	e039      	b.n	80016ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	6859      	ldr	r1, [r3, #4]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	461a      	mov	r2, r3
 8001646:	f000 fa29 	bl	8001a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2150      	movs	r1, #80	; 0x50
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fa80 	bl	8001b56 <TIM_ITRx_SetConfig>
      break;
 8001656:	e029      	b.n	80016ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	461a      	mov	r2, r3
 8001666:	f000 fa47 	bl	8001af8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2160      	movs	r1, #96	; 0x60
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fa70 	bl	8001b56 <TIM_ITRx_SetConfig>
      break;
 8001676:	e019      	b.n	80016ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	461a      	mov	r2, r3
 8001686:	f000 fa09 	bl	8001a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2140      	movs	r1, #64	; 0x40
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fa60 	bl	8001b56 <TIM_ITRx_SetConfig>
      break;
 8001696:	e009      	b.n	80016ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f000 fa57 	bl	8001b56 <TIM_ITRx_SetConfig>
      break;
 80016a8:	e000      	b.n	80016ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80016aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a29      	ldr	r2, [pc, #164]	; (8001780 <TIM_Base_SetConfig+0xb8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00b      	beq.n	80016f8 <TIM_Base_SetConfig+0x30>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e6:	d007      	beq.n	80016f8 <TIM_Base_SetConfig+0x30>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a26      	ldr	r2, [pc, #152]	; (8001784 <TIM_Base_SetConfig+0xbc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d003      	beq.n	80016f8 <TIM_Base_SetConfig+0x30>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a25      	ldr	r2, [pc, #148]	; (8001788 <TIM_Base_SetConfig+0xc0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d108      	bne.n	800170a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <TIM_Base_SetConfig+0xb8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d00b      	beq.n	800172a <TIM_Base_SetConfig+0x62>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001718:	d007      	beq.n	800172a <TIM_Base_SetConfig+0x62>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a19      	ldr	r2, [pc, #100]	; (8001784 <TIM_Base_SetConfig+0xbc>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d003      	beq.n	800172a <TIM_Base_SetConfig+0x62>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a18      	ldr	r2, [pc, #96]	; (8001788 <TIM_Base_SetConfig+0xc0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d108      	bne.n	800173c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	4313      	orrs	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	4313      	orrs	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <TIM_Base_SetConfig+0xb8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d103      	bne.n	8001770 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	615a      	str	r2, [r3, #20]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40012c00 	.word	0x40012c00
 8001784:	40000400 	.word	0x40000400
 8001788:	40000800 	.word	0x40000800

0800178c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	f023 0201 	bic.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f023 0303 	bic.w	r3, r3, #3
 80017c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f023 0302 	bic.w	r3, r3, #2
 80017d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4313      	orrs	r3, r2
 80017de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <TIM_OC1_SetConfig+0xc8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d10c      	bne.n	8001802 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f023 0308 	bic.w	r3, r3, #8
 80017ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a13      	ldr	r2, [pc, #76]	; (8001854 <TIM_OC1_SetConfig+0xc8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d111      	bne.n	800182e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	621a      	str	r2, [r3, #32]
}
 8001848:	bf00      	nop
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40012c00 	.word	0x40012c00

08001858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	f023 0210 	bic.w	r2, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800188e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f023 0320 	bic.w	r3, r3, #32
 80018a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <TIM_OC2_SetConfig+0xd0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d10d      	bne.n	80018d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a14      	ldr	r2, [pc, #80]	; (8001928 <TIM_OC2_SetConfig+0xd0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d113      	bne.n	8001904 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	621a      	str	r2, [r3, #32]
}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	40012c00 	.word	0x40012c00

0800192c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800195a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	4313      	orrs	r3, r2
 8001980:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <TIM_OC3_SetConfig+0xd0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d10d      	bne.n	80019a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	4313      	orrs	r3, r2
 800199c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <TIM_OC3_SetConfig+0xd0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d113      	bne.n	80019d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	621a      	str	r2, [r3, #32]
}
 80019f0:	bf00      	nop
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40012c00 	.word	0x40012c00

08001a00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	031b      	lsls	r3, r3, #12
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <TIM_OC4_SetConfig+0x98>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d109      	bne.n	8001a74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	019b      	lsls	r3, r3, #6
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	621a      	str	r2, [r3, #32]
}
 8001a8e:	bf00      	nop
 8001a90:	371c      	adds	r7, #28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	40012c00 	.word	0x40012c00

08001a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	f023 0201 	bic.w	r2, r3, #1
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f023 030a 	bic.w	r3, r3, #10
 8001ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	621a      	str	r2, [r3, #32]
}
 8001aee:	bf00      	nop
 8001af0:	371c      	adds	r7, #28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f023 0210 	bic.w	r2, r3, #16
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	031b      	lsls	r3, r3, #12
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	621a      	str	r2, [r3, #32]
}
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b085      	sub	sp, #20
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	f043 0307 	orr.w	r3, r3, #7
 8001b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	609a      	str	r2, [r3, #8]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b087      	sub	sp, #28
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ba4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	021a      	lsls	r2, r3, #8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	609a      	str	r2, [r3, #8]
}
 8001bbe:	bf00      	nop
 8001bc0:	371c      	adds	r7, #28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	2201      	movs	r2, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a1a      	ldr	r2, [r3, #32]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	401a      	ands	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a1a      	ldr	r2, [r3, #32]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	431a      	orrs	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	621a      	str	r2, [r3, #32]
}
 8001c06:	bf00      	nop
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e032      	b.n	8001c8e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c60:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <Gpio_hal_conf_get>:
  { CONF_GPIO_ENUM_UNUSED,      GPIOB,     GPIO_PIN_9,           GPIO_MODE_AF_PP,        GPIO_PIN_RESET,       GPIO_NOPULL},
  { CONF_GPIO_ENUM_UNUSED,      GPIOB,     GPIO_PIN_9,           GPIO_MODE_AF_PP,        GPIO_PIN_RESET,       GPIO_NOPULL},
};

const gpio_hal_cfg_t * const Gpio_hal_conf_get(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
    return (gpio_hal_conf/*[0]*/);
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <Gpio_hal_conf_get+0x10>)
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	08003334 	.word	0x08003334

08001cac <Gpio_hal_conf_get_size>:

base_t Gpio_hal_conf_get_size(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
    return (sizeof(gpio_hal_conf)/sizeof(gpio_hal_conf[0]));
 8001cb0:	2305      	movs	r3, #5
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
	...

08001cbc <Timer_hal_PWM_conf_get>:
    {OC_CHANNEL_TEST_1, TIMER_4,   TIM_CHANNEL_1, TIM_OCMODE_TIMING,    TIM_OCPOLARITY_HIGH,     TIMER_HAL_INT_ON}
};


const timer_hal_pwm_conf_t * const Timer_hal_PWM_conf_get(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
    return (pwm_test/*[0]*/);
 8001cc0:	4b02      	ldr	r3, [pc, #8]	; (8001ccc <Timer_hal_PWM_conf_get+0x10>)
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	080033ec 	.word	0x080033ec

08001cd0 <Timer_hal_OC_conf_get>:

const timer_hal_oc_conf_t * const Timer_hal_OC_conf_get(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
    return (oc_test/*[0]*/);
 8001cd4:	4b02      	ldr	r3, [pc, #8]	; (8001ce0 <Timer_hal_OC_conf_get+0x10>)
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	08003400 	.word	0x08003400

08001ce4 <Timer_hal_conf_get>:

const timer_hal_conf_t * const Timer_hal_conf_get(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
    return (timer_test/*[0]*/);
 8001ce8:	4b02      	ldr	r3, [pc, #8]	; (8001cf4 <Timer_hal_conf_get+0x10>)
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	080033ac 	.word	0x080033ac

08001cf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <SystemInit+0x5c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <SystemInit+0x5c>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <SystemInit+0x5c>)
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	4911      	ldr	r1, [pc, #68]	; (8001d54 <SystemInit+0x5c>)
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <SystemInit+0x60>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <SystemInit+0x5c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <SystemInit+0x5c>)
 8001d1a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d22:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <SystemInit+0x5c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <SystemInit+0x5c>)
 8001d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <SystemInit+0x5c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <SystemInit+0x5c>)
 8001d36:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001d3a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <SystemInit+0x5c>)
 8001d3e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d42:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <SystemInit+0x64>)
 8001d46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d4a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	40021000 	.word	0x40021000
 8001d58:	f8ff0000 	.word	0xf8ff0000
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001d72:	4b2c      	ldr	r3, [pc, #176]	; (8001e24 <SystemCoreClockUpdate+0xc4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d007      	beq.n	8001d92 <SystemCoreClockUpdate+0x32>
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d009      	beq.n	8001d9a <SystemCoreClockUpdate+0x3a>
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d133      	bne.n	8001df2 <SystemCoreClockUpdate+0x92>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8001d8a:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <SystemCoreClockUpdate+0xc8>)
 8001d8c:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <SystemCoreClockUpdate+0xcc>)
 8001d8e:	601a      	str	r2, [r3, #0]
      break;
 8001d90:	e033      	b.n	8001dfa <SystemCoreClockUpdate+0x9a>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <SystemCoreClockUpdate+0xc8>)
 8001d94:	4a25      	ldr	r2, [pc, #148]	; (8001e2c <SystemCoreClockUpdate+0xcc>)
 8001d96:	601a      	str	r2, [r3, #0]
      break;
 8001d98:	e02f      	b.n	8001dfa <SystemCoreClockUpdate+0x9a>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <SystemCoreClockUpdate+0xc4>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001da2:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <SystemCoreClockUpdate+0xc4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dac:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	0c9b      	lsrs	r3, r3, #18
 8001db2:	3302      	adds	r3, #2
 8001db4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d106      	bne.n	8001dca <SystemCoreClockUpdate+0x6a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <SystemCoreClockUpdate+0xd0>)
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <SystemCoreClockUpdate+0xc8>)
 8001dc6:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8001dc8:	e017      	b.n	8001dfa <SystemCoreClockUpdate+0x9a>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <SystemCoreClockUpdate+0xc4>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <SystemCoreClockUpdate+0x84>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <SystemCoreClockUpdate+0xd0>)
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <SystemCoreClockUpdate+0xc8>)
 8001de0:	6013      	str	r3, [r2, #0]
      break;
 8001de2:	e00a      	b.n	8001dfa <SystemCoreClockUpdate+0x9a>
          SystemCoreClock = HSE_VALUE * pllmull;
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <SystemCoreClockUpdate+0xcc>)
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <SystemCoreClockUpdate+0xc8>)
 8001dee:	6013      	str	r3, [r2, #0]
      break;
 8001df0:	e003      	b.n	8001dfa <SystemCoreClockUpdate+0x9a>

    default:
      SystemCoreClock = HSI_VALUE;
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <SystemCoreClockUpdate+0xc8>)
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <SystemCoreClockUpdate+0xcc>)
 8001df6:	601a      	str	r2, [r3, #0]
      break;
 8001df8:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <SystemCoreClockUpdate+0xc4>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <SystemCoreClockUpdate+0xd4>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <SystemCoreClockUpdate+0xc8>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <SystemCoreClockUpdate+0xc8>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	007a1200 	.word	0x007a1200
 8001e30:	003d0900 	.word	0x003d0900
 8001e34:	08003414 	.word	0x08003414

08001e38 <Clock_hal_init>:
#include <wrappers/clock_hal.h>

clk_hal_err_t Clock_hal_init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b094      	sub	sp, #80	; 0x50
 8001e3c:	af00      	add	r7, sp, #0
  clk_hal_err_t st = CLK_INIT_PEND;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e48:	2228      	movs	r2, #40	; 0x28
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f001 fa53 	bl	80032f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e62:	463b      	mov	r3, r7
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
  //RCC_OscInitStruct.HSEPredivValue = 0;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001e76:	2300      	movs	r3, #0
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e82:	2310      	movs	r3, #16
 8001e84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF; // or none
 8001e86:	2301      	movs	r3, #1
 8001e88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8001e90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e94:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fcfa 	bl	8000894 <HAL_RCC_OscConfig>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <Clock_hal_init+0x74>
  {
    st = CLK_ERR;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eac:	230f      	movs	r3, #15
 8001eae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe ff64 	bl	8000d94 <HAL_RCC_ClockConfig>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <Clock_hal_init+0xa0>
  {
    st = CLK_ERR;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }
  HAL_RCC_EnableCSS();
 8001ed8:	f7ff f846 	bl	8000f68 <HAL_RCC_EnableCSS>
  SystemCoreClockUpdate();
 8001edc:	f7ff ff40 	bl	8001d60 <SystemCoreClockUpdate>
  return st;
 8001ee0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3750      	adds	r7, #80	; 0x50
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <Gpio_hal_set_value>:
	return GPIO_ERR_PIN;
}


gpio_hal_err_t Gpio_hal_set_value(conf_gpio_e pin_enum, gpio_hal_val_t val) // per il gpio_hal_val_t metti un redefine di quello ufficiale stm32
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460a      	mov	r2, r1
 8001ef6:	71fb      	strb	r3, [r7, #7]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	71bb      	strb	r3, [r7, #6]
    base_t i = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < total_pins; i++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	e031      	b.n	8001f6a <Gpio_hal_set_value+0x7e>
	{
        if (gpio_hal_cfg_buff[i].pin_enum != CONF_GPIO_ENUM_UNUSED)
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <Gpio_hal_set_value+0x94>)
 8001f08:	6819      	ldr	r1, [r3, #0]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	440b      	add	r3, r1
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d023      	beq.n	8001f64 <Gpio_hal_set_value+0x78>
        {
            // can be optimized with LOCAL INDICIZATION!, or use the fast, non portable approach
            if (gpio_hal_cfg_buff[i].pin_enum == pin_enum)
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <Gpio_hal_set_value+0x94>)
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	79fa      	ldrb	r2, [r7, #7]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d117      	bne.n	8001f64 <Gpio_hal_set_value+0x78>
            {
                HAL_GPIO_WritePin(gpio_hal_cfg_buff[i].port, gpio_hal_cfg_buff[i].pin, val);
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <Gpio_hal_set_value+0x94>)
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	6858      	ldr	r0, [r3, #4]
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <Gpio_hal_set_value+0x94>)
 8001f48:	6819      	ldr	r1, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	891b      	ldrh	r3, [r3, #8]
 8001f58:	79ba      	ldrb	r2, [r7, #6]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f7fe fc7c 	bl	8000858 <HAL_GPIO_WritePin>
                return GPIO_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	e008      	b.n	8001f76 <Gpio_hal_set_value+0x8a>
	for(i = 0; i < total_pins; i++)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3301      	adds	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <Gpio_hal_set_value+0x98>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d3c8      	bcc.n	8001f06 <Gpio_hal_set_value+0x1a>
            }
        }
	}
	return GPIO_ERR_PIN;
 8001f74:	2302      	movs	r3, #2
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000220 	.word	0x20000220
 8001f84:	2000002c 	.word	0x2000002c

08001f88 <Gpio_hal_init>:
	return port_id->IDR; // in file stm32f103x6.h
}


void Gpio_hal_init(const gpio_hal_cfg_t* handle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f96:	f107 031c 	add.w	r3, r7, #28
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]

	gpio_hal_cfg_buff = handle;
 8001fa4:	4a7c      	ldr	r2, [pc, #496]	; (8002198 <Gpio_hal_init+0x210>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
	total_pins = Gpio_hal_conf_get_size();
 8001faa:	f7ff fe7f 	bl	8001cac <Gpio_hal_conf_get_size>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	4b7a      	ldr	r3, [pc, #488]	; (800219c <Gpio_hal_init+0x214>)
 8001fb2:	601a      	str	r2, [r3, #0]

	for (i = 0; i < total_pins; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001fba:	e01b      	b.n	8001ff4 <Gpio_hal_init+0x6c>
	{
		HAL_GPIO_DeInit(handle[i].port, handle[i].pin);
 8001fbc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	6858      	ldr	r0, [r3, #4]
 8001fd0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	891b      	ldrh	r3, [r3, #8]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f7fe fb7b 	bl	80006e0 <HAL_GPIO_DeInit>
	for (i = 0; i < total_pins; i++)
 8001fea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001ff4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001ff8:	4b68      	ldr	r3, [pc, #416]	; (800219c <Gpio_hal_init+0x214>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d3dd      	bcc.n	8001fbc <Gpio_hal_init+0x34>
	}

	for (i = 0; i < total_pins ; i++)
 8002000:	2300      	movs	r3, #0
 8002002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002006:	e0bc      	b.n	8002182 <Gpio_hal_init+0x1fa>
	{
        /* Don't exclude the CONF_GPIO_ENUM_UNUSED on purpose */
		if ((gpio_hal_port_t)handle[i].port == GPIOA)
 8002008:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	461a      	mov	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a60      	ldr	r2, [pc, #384]	; (80021a0 <Gpio_hal_init+0x218>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d10b      	bne.n	800203a <Gpio_hal_init+0xb2>
			__HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	4b60      	ldr	r3, [pc, #384]	; (80021a4 <Gpio_hal_init+0x21c>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	4a5f      	ldr	r2, [pc, #380]	; (80021a4 <Gpio_hal_init+0x21c>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	6193      	str	r3, [r2, #24]
 800202e:	4b5d      	ldr	r3, [pc, #372]	; (80021a4 <Gpio_hal_init+0x21c>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	69bb      	ldr	r3, [r7, #24]
		if ((gpio_hal_port_t)handle[i].port == GPIOB)
 800203a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	461a      	mov	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4a56      	ldr	r2, [pc, #344]	; (80021a8 <Gpio_hal_init+0x220>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d10b      	bne.n	800206c <Gpio_hal_init+0xe4>
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8002054:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <Gpio_hal_init+0x21c>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a52      	ldr	r2, [pc, #328]	; (80021a4 <Gpio_hal_init+0x21c>)
 800205a:	f043 0308 	orr.w	r3, r3, #8
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b50      	ldr	r3, [pc, #320]	; (80021a4 <Gpio_hal_init+0x21c>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	697b      	ldr	r3, [r7, #20]
		if ((gpio_hal_port_t)handle[i].port == GPIOC)
 800206c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	461a      	mov	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a4a      	ldr	r2, [pc, #296]	; (80021ac <Gpio_hal_init+0x224>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d10b      	bne.n	800209e <Gpio_hal_init+0x116>
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <Gpio_hal_init+0x21c>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	4a46      	ldr	r2, [pc, #280]	; (80021a4 <Gpio_hal_init+0x21c>)
 800208c:	f043 0310 	orr.w	r3, r3, #16
 8002090:	6193      	str	r3, [r2, #24]
 8002092:	4b44      	ldr	r3, [pc, #272]	; (80021a4 <Gpio_hal_init+0x21c>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]
		if ((gpio_hal_port_t)handle[i].port == GPIOD)
 800209e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	461a      	mov	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4a3f      	ldr	r2, [pc, #252]	; (80021b0 <Gpio_hal_init+0x228>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d10b      	bne.n	80020d0 <Gpio_hal_init+0x148>
			__HAL_RCC_GPIOD_CLK_ENABLE();
 80020b8:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <Gpio_hal_init+0x21c>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4a39      	ldr	r2, [pc, #228]	; (80021a4 <Gpio_hal_init+0x21c>)
 80020be:	f043 0320 	orr.w	r3, r3, #32
 80020c2:	6193      	str	r3, [r2, #24]
 80020c4:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <Gpio_hal_init+0x21c>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]

		HAL_GPIO_WritePin(handle[i].port, handle[i].pin, handle[i].val); // reason: was initialized first time in the CubeMX generated code example
 80020d0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	461a      	mov	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	6858      	ldr	r0, [r3, #4]
 80020e4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	461a      	mov	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	8919      	ldrh	r1, [r3, #8]
 80020f8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	461a      	mov	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	7d1b      	ldrb	r3, [r3, #20]
 800210c:	461a      	mov	r2, r3
 800210e:	f7fe fba3 	bl	8000858 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Mode = handle[i].mode_io;
 8002112:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pin = handle[i].pin;
 8002128:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	461a      	mov	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	891b      	ldrh	r3, [r3, #8]
 800213c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = handle[i].mode_pull; 
 800213e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	461a      	mov	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;//GPIO_SPEED_FREQ_LOW; // metti API per gestire funzioni particolari
 8002154:	2303      	movs	r3, #3
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(handle[i].port, &GPIO_InitStruct);
 8002158:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	461a      	mov	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f107 021c 	add.w	r2, r7, #28
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f95a 	bl	800042c <HAL_GPIO_Init>
	for (i = 0; i < total_pins ; i++)
 8002178:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800217c:	3301      	adds	r3, #1
 800217e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002182:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002186:	4b05      	ldr	r3, [pc, #20]	; (800219c <Gpio_hal_init+0x214>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	f4ff af3c 	bcc.w	8002008 <Gpio_hal_init+0x80>
	}
}
 8002190:	bf00      	nop
 8002192:	3730      	adds	r7, #48	; 0x30
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000220 	.word	0x20000220
 800219c:	2000002c 	.word	0x2000002c
 80021a0:	40010800 	.word	0x40010800
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010c00 	.word	0x40010c00
 80021ac:	40011000 	.word	0x40011000
 80021b0:	40011400 	.word	0x40011400

080021b4 <Core_hal_init>:
#include <stm32f1xx_hal.h>
#include <wrappers/hal.h>

void Core_hal_init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 80021ba:	f7fd ffd9 	bl	8000170 <HAL_Init>

	  __HAL_RCC_AFIO_CLK_ENABLE();
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <Core_hal_init+0x60>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	4a14      	ldr	r2, [pc, #80]	; (8002214 <Core_hal_init+0x60>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6193      	str	r3, [r2, #24]
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <Core_hal_init+0x60>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <Core_hal_init+0x60>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <Core_hal_init+0x60>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e0:	61d3      	str	r3, [r2, #28]
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <Core_hal_init+0x60>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]

	  /* System interrupt init*/

	  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	  */
	  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <Core_hal_init+0x64>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <Core_hal_init+0x64>)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6053      	str	r3, [r2, #4]

}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	40010000 	.word	0x40010000

0800221c <IntHal_default_ISR>:
};

struct isr_array isr_pt_array[INTERRUPT_MAX_SUPPORTED_ISR];

static void IntHal_default_ISR(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
	asm("nop");
 8002220:	bf00      	nop
	while(1);
 8002222:	e7fe      	b.n	8002222 <IntHal_default_ISR+0x6>

08002224 <IntHal_suspend_global_interrupt>:
}


base_t IntHal_suspend_global_interrupt(void)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800222a:	f3ef 8310 	mrs	r3, PRIMASK
 800222e:	603b      	str	r3, [r7, #0]
  return(result);
 8002230:	683b      	ldr	r3, [r7, #0]
	base_t prim;
    
    prim = __get_PRIMASK();
 8002232:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002234:	b672      	cpsid	i
    
    /* Disable interrupts */
    __disable_irq();

    return prim;
 8002236:	687b      	ldr	r3, [r7, #4]
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <IntHal_enable_global_interrupt>:
        __enable_irq();
    }
}

void IntHal_enable_global_interrupt(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8002246:	b662      	cpsie	i
	__enable_irq();
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <IntHal_vector_init>:

void IntHal_vector_init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	71fb      	strb	r3, [r7, #7]
	base_t status = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
	status = IntHal_suspend_global_interrupt();
 800225e:	f7ff ffe1 	bl	8002224 <IntHal_suspend_global_interrupt>
 8002262:	6038      	str	r0, [r7, #0]
	for (temp=0; temp<INTERRUPT_MAX_SUPPORTED_ISR; temp++)
 8002264:	2300      	movs	r3, #0
 8002266:	71fb      	strb	r3, [r7, #7]
 8002268:	e00d      	b.n	8002286 <IntHal_vector_init+0x36>
	{
		isr_pt_array[temp].isr_pt = &IntHal_default_ISR;
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	4a09      	ldr	r2, [pc, #36]	; (8002294 <IntHal_vector_init+0x44>)
 800226e:	490a      	ldr	r1, [pc, #40]	; (8002298 <IntHal_vector_init+0x48>)
 8002270:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		isr_pt_array[temp].state = INTERRUPT_DEFAULT;	
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	4a07      	ldr	r2, [pc, #28]	; (8002294 <IntHal_vector_init+0x44>)
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	2202      	movs	r2, #2
 800227e:	711a      	strb	r2, [r3, #4]
	for (temp=0; temp<INTERRUPT_MAX_SUPPORTED_ISR; temp++)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	3301      	adds	r3, #1
 8002284:	71fb      	strb	r3, [r7, #7]
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b19      	cmp	r3, #25
 800228a:	d9ee      	bls.n	800226a <IntHal_vector_init+0x1a>
	}
	//IntHal_restore_global_interrupt(status);
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000224 	.word	0x20000224
 8002298:	0800221d 	.word	0x0800221d

0800229c <IntHal_vector_register>:


void IntHal_vector_register(void (*f_pt)(void), int_hal_vect_num_t irq_i)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	70fb      	strb	r3, [r7, #3]
	// unsigned long *ulNvicTbl;
	// ulNvicTbl = (ivTable_t*)CONF_REG(HAL_CONF_VTABLE); // check alignment: type of pointer. Try with CC3200
	// ulNvicTbl[id] = (unsigned long)f_pt;
	if (isr_pt_array[irq_i].state != INTERRUPT_ASSIGNED)
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <IntHal_vector_register+0x3c>)
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	791b      	ldrb	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <IntHal_vector_register+0x30>
	{
		isr_pt_array[irq_i].isr_pt = f_pt;
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	4907      	ldr	r1, [pc, #28]	; (80022d8 <IntHal_vector_register+0x3c>)
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		//isr_pt_array[irq_i].iv_id  = 
		isr_pt_array[irq_i].state = INTERRUPT_ASSIGNED;           // otherwise marked as unassigned and properly handled
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	4a05      	ldr	r2, [pc, #20]	; (80022d8 <IntHal_vector_register+0x3c>)
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	2200      	movs	r2, #0
 80022ca:	711a      	strb	r2, [r3, #4]
	}
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000224 	.word	0x20000224

080022dc <I2C1_EV_IRQHandler>:
	isr_pt_array[irq_i].state = INTERRUPT_UNASSIGNED;         
}


void I2C1_EV_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  isr_pt_array[I2C1_EV_IRQHandler_num].isr_pt();
 80022e0:	4b02      	ldr	r3, [pc, #8]	; (80022ec <I2C1_EV_IRQHandler+0x10>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4798      	blx	r3
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000224 	.word	0x20000224

080022f0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{ 
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  isr_pt_array[I2C1_ER_IRQHandler_num].isr_pt();
 80022f4:	4b02      	ldr	r3, [pc, #8]	; (8002300 <I2C1_ER_IRQHandler+0x10>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4798      	blx	r3
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000224 	.word	0x20000224

08002304 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  isr_pt_array[TIM4_IRQHandler_num].isr_pt();
 8002308:	4b02      	ldr	r3, [pc, #8]	; (8002314 <TIM4_IRQHandler+0x10>)
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	4798      	blx	r3
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000224 	.word	0x20000224

08002318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <HardFault_Handler+0x4>

0800232a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <MemManage_Handler+0x4>

08002330 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <BusFault_Handler+0x4>

08002336 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <UsageFault_Handler+0x4>

0800233c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
 // HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <timer4_isr>:
	TIMER_4_HAL
};


static void timer4_isr()
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_IT_SOURCE(&tim[TIMER_4_HAL], TIM_IT_CC1))
 8002370:	4b26      	ldr	r3, [pc, #152]	; (800240c <timer4_isr+0xa0>)
 8002372:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b02      	cmp	r3, #2
 800237e:	d10a      	bne.n	8002396 <timer4_isr+0x2a>
    {
        __HAL_TIM_CLEAR_IT(&tim[TIMER_4_HAL], TIM_IT_CC1);
 8002380:	4b22      	ldr	r3, [pc, #136]	; (800240c <timer4_isr+0xa0>)
 8002382:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002386:	f06f 0202 	mvn.w	r2, #2
 800238a:	611a      	str	r2, [r3, #16]
        timer_hal_ISR_cb[TIMER_4_HAL](TIMER_HAL_CH1); // callback which will provide the calling hardware ID (i.e TIMER_4) to the application
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <timer4_isr+0xa4>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2000      	movs	r0, #0
 8002392:	4798      	blx	r3
    }   
    else
    {
        // nothing and return
    }
}
 8002394:	e037      	b.n	8002406 <timer4_isr+0x9a>
    else if (__HAL_TIM_GET_IT_SOURCE(&tim[TIMER_4_HAL], TIM_IT_CC2))
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <timer4_isr+0xa0>)
 8002398:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d10a      	bne.n	80023bc <timer4_isr+0x50>
        __HAL_TIM_CLEAR_IT(&tim[TIMER_4_HAL], TIM_IT_CC2);
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <timer4_isr+0xa0>)
 80023a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023ac:	f06f 0204 	mvn.w	r2, #4
 80023b0:	611a      	str	r2, [r3, #16]
        timer_hal_ISR_cb[TIMER_4_HAL](TIMER_HAL_CH2);
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <timer4_isr+0xa4>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2001      	movs	r0, #1
 80023b8:	4798      	blx	r3
}
 80023ba:	e024      	b.n	8002406 <timer4_isr+0x9a>
    else if (__HAL_TIM_GET_IT_SOURCE(&tim[TIMER_4_HAL], TIM_IT_CC3))
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <timer4_isr+0xa0>)
 80023be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d10a      	bne.n	80023e2 <timer4_isr+0x76>
        __HAL_TIM_CLEAR_IT(&tim[TIMER_4_HAL], TIM_IT_CC3);
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <timer4_isr+0xa0>)
 80023ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023d2:	f06f 0208 	mvn.w	r2, #8
 80023d6:	611a      	str	r2, [r3, #16]
        timer_hal_ISR_cb[TIMER_4_HAL](TIMER_HAL_CH3);
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <timer4_isr+0xa4>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2002      	movs	r0, #2
 80023de:	4798      	blx	r3
}
 80023e0:	e011      	b.n	8002406 <timer4_isr+0x9a>
    else if (__HAL_TIM_GET_IT_SOURCE(&tim[TIMER_4_HAL], TIM_IT_CC4))
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <timer4_isr+0xa0>)
 80023e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d109      	bne.n	8002406 <timer4_isr+0x9a>
        __HAL_TIM_CLEAR_IT(&tim[TIMER_4_HAL], TIM_IT_CC4);
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <timer4_isr+0xa0>)
 80023f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023f8:	f06f 0210 	mvn.w	r2, #16
 80023fc:	611a      	str	r2, [r3, #16]
        timer_hal_ISR_cb[TIMER_4_HAL](TIMER_HAL_CH4);
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <timer4_isr+0xa4>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2003      	movs	r0, #3
 8002404:	4798      	blx	r3
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000011c 	.word	0x2000011c
 8002410:	20000030 	.word	0x20000030

08002414 <timer3_isr>:

static void timer3_isr()
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
    // metti cb
    if (__HAL_TIM_GET_IT_SOURCE(&tim[TIMER_3], TIM_IT_CC1))
 8002418:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <timer3_isr+0x90>)
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b02      	cmp	r3, #2
 8002424:	d109      	bne.n	800243a <timer3_isr+0x26>
    {
        __HAL_TIM_CLEAR_IT(&tim[TIMER_3], TIM_IT_CC1);
 8002426:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <timer3_isr+0x90>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f06f 0202 	mvn.w	r2, #2
 800242e:	611a      	str	r2, [r3, #16]
        timer_hal_ISR_cb[TIMER_3](TIMER_HAL_CH1); // callback which will provide the calling hardware ID (i.e TIMER_4) to the application
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <timer3_isr+0x94>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2000      	movs	r0, #0
 8002436:	4798      	blx	r3
    }   
    else
    {
        // nothing and return
    }
}
 8002438:	e031      	b.n	800249e <timer3_isr+0x8a>
    else if (__HAL_TIM_GET_IT_SOURCE(&tim[TIMER_3], TIM_IT_CC2))
 800243a:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <timer3_isr+0x90>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b04      	cmp	r3, #4
 8002446:	d109      	bne.n	800245c <timer3_isr+0x48>
        __HAL_TIM_CLEAR_IT(&tim[TIMER_3], TIM_IT_CC2);
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <timer3_isr+0x90>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f06f 0204 	mvn.w	r2, #4
 8002450:	611a      	str	r2, [r3, #16]
        timer_hal_ISR_cb[TIMER_3](TIMER_HAL_CH2);
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <timer3_isr+0x94>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2001      	movs	r0, #1
 8002458:	4798      	blx	r3
}
 800245a:	e020      	b.n	800249e <timer3_isr+0x8a>
    else if (__HAL_TIM_GET_IT_SOURCE(&tim[TIMER_3], TIM_IT_CC3))
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <timer3_isr+0x90>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b08      	cmp	r3, #8
 8002468:	d109      	bne.n	800247e <timer3_isr+0x6a>
        __HAL_TIM_CLEAR_IT(&tim[TIMER_3], TIM_IT_CC3);
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <timer3_isr+0x90>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f06f 0208 	mvn.w	r2, #8
 8002472:	611a      	str	r2, [r3, #16]
        timer_hal_ISR_cb[TIMER_3](TIMER_HAL_CH3);
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <timer3_isr+0x94>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2002      	movs	r0, #2
 800247a:	4798      	blx	r3
}
 800247c:	e00f      	b.n	800249e <timer3_isr+0x8a>
    else if (__HAL_TIM_GET_IT_SOURCE(&tim[TIMER_3], TIM_IT_CC4))
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <timer3_isr+0x90>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b10      	cmp	r3, #16
 800248a:	d108      	bne.n	800249e <timer3_isr+0x8a>
        __HAL_TIM_CLEAR_IT(&tim[TIMER_3], TIM_IT_CC4);
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <timer3_isr+0x90>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f06f 0210 	mvn.w	r2, #16
 8002494:	611a      	str	r2, [r3, #16]
        timer_hal_ISR_cb[TIMER_3](TIMER_HAL_CH4);
 8002496:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <timer3_isr+0x94>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2003      	movs	r0, #3
 800249c:	4798      	blx	r3
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	2000011c 	.word	0x2000011c
 80024a8:	20000030 	.word	0x20000030

080024ac <timer2_isr>:

static void timer2_isr()
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
    // metti cb
    //	timer_hal_ISR_cb[TIMER_2](TIMER_2); // callback a i.e. ser_rx_char_ISR(ser_dev_st* console)
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <timer1_isr>:

static void timer1_isr()
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
    // metti cb
    //	timer_hal_ISR_cb[TIMER_1](TIMER_1); // callback a i.e. ser_rx_char_ISR(ser_dev_st* console)
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <timer_hal_error_handler>:

static void timer_hal_error_handler(timer_hal_err_t *flag)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
    *flag = TIMER_HAL_ERR_ERROR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2203      	movs	r2, #3
 80024d0:	701a      	strb	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <Timer_hal_init>:

timer_hal_err_t Timer_hal_init(const timer_hal_conf_t *handle)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
    timer_hal_err_t ret = TIMER_HAL_ERR_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	76fb      	strb	r3, [r7, #27]
    timer_hal_cfg_buff = handle;
 80024e8:	4a8f      	ldr	r2, [pc, #572]	; (8002728 <Timer_hal_init+0x24c>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6013      	str	r3, [r2, #0]

    for (int i = 0; i < TIMER_TOTAL_INSTANCE; i++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	e10a      	b.n	800270a <Timer_hal_init+0x22e>
    {
        if (handle[i].tmr != CONF_TIMER_ENUM_UNUSED)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	f000 8100 	beq.w	8002704 <Timer_hal_init+0x228>
        {
            tim[i].Instance = handle[i].periph; //TIM3;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	4987      	ldr	r1, [pc, #540]	; (800272c <Timer_hal_init+0x250>)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	019b      	lsls	r3, r3, #6
 8002514:	440b      	add	r3, r1
 8002516:	601a      	str	r2, [r3, #0]
            tim[i].Init.Prescaler = handle[i].presc;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	4982      	ldr	r1, [pc, #520]	; (800272c <Timer_hal_init+0x250>)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	019b      	lsls	r3, r3, #6
 8002528:	440b      	add	r3, r1
 800252a:	3304      	adds	r3, #4
 800252c:	601a      	str	r2, [r3, #0]
            tim[i].Init.CounterMode = TIM_COUNTERMODE_UP; // default, change with LL
 800252e:	4a7f      	ldr	r2, [pc, #508]	; (800272c <Timer_hal_init+0x250>)
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	019b      	lsls	r3, r3, #6
 8002534:	4413      	add	r3, r2
 8002536:	3308      	adds	r3, #8
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
            tim[i].Init.Period = handle[i].period;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	4979      	ldr	r1, [pc, #484]	; (800272c <Timer_hal_init+0x250>)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	019b      	lsls	r3, r3, #6
 800254c:	440b      	add	r3, r1
 800254e:	330c      	adds	r3, #12
 8002550:	601a      	str	r2, [r3, #0]
            tim[i].Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;            // default, chenge with LL
 8002552:	4a76      	ldr	r2, [pc, #472]	; (800272c <Timer_hal_init+0x250>)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	019b      	lsls	r3, r3, #6
 8002558:	4413      	add	r3, r2
 800255a:	3310      	adds	r3, #16
 800255c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002560:	601a      	str	r2, [r3, #0]
            tim[i].Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE; // default, change with LL if needed
 8002562:	4a72      	ldr	r2, [pc, #456]	; (800272c <Timer_hal_init+0x250>)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	019b      	lsls	r3, r3, #6
 8002568:	4413      	add	r3, r2
 800256a:	3318      	adds	r3, #24
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	601a      	str	r2, [r3, #0]

            if (handle[i].periph == TIM1)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4413      	add	r3, r2
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a6d      	ldr	r2, [pc, #436]	; (8002730 <Timer_hal_init+0x254>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d12c      	bne.n	80025da <Timer_hal_init+0xfe>
            {
                __HAL_RCC_TIM1_CLK_ENABLE();
 8002580:	4b6c      	ldr	r3, [pc, #432]	; (8002734 <Timer_hal_init+0x258>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	4a6b      	ldr	r2, [pc, #428]	; (8002734 <Timer_hal_init+0x258>)
 8002586:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800258a:	6193      	str	r3, [r2, #24]
 800258c:	4b69      	ldr	r3, [pc, #420]	; (8002734 <Timer_hal_init+0x258>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697b      	ldr	r3, [r7, #20]
                HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002598:	2200      	movs	r2, #0
 800259a:	2100      	movs	r1, #0
 800259c:	2018      	movs	r0, #24
 800259e:	f7fd ff0e 	bl	80003be <HAL_NVIC_SetPriority>
                HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80025a2:	2018      	movs	r0, #24
 80025a4:	f7fd ff27 	bl	80003f6 <HAL_NVIC_EnableIRQ>
                HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2100      	movs	r1, #0
 80025ac:	2019      	movs	r0, #25
 80025ae:	f7fd ff06 	bl	80003be <HAL_NVIC_SetPriority>
                HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80025b2:	2019      	movs	r0, #25
 80025b4:	f7fd ff1f 	bl	80003f6 <HAL_NVIC_EnableIRQ>
                HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2100      	movs	r1, #0
 80025bc:	201a      	movs	r0, #26
 80025be:	f7fd fefe 	bl	80003be <HAL_NVIC_SetPriority>
                HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80025c2:	201a      	movs	r0, #26
 80025c4:	f7fd ff17 	bl	80003f6 <HAL_NVIC_EnableIRQ>
                HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2100      	movs	r1, #0
 80025cc:	201b      	movs	r0, #27
 80025ce:	f7fd fef6 	bl	80003be <HAL_NVIC_SetPriority>
                HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80025d2:	201b      	movs	r0, #27
 80025d4:	f7fd ff0f 	bl	80003f6 <HAL_NVIC_EnableIRQ>
 80025d8:	e05b      	b.n	8002692 <Timer_hal_init+0x1b6>
            }
            else if (handle[i].periph == TIM2)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e8:	d114      	bne.n	8002614 <Timer_hal_init+0x138>
            {
                __HAL_RCC_TIM2_CLK_ENABLE();
 80025ea:	4b52      	ldr	r3, [pc, #328]	; (8002734 <Timer_hal_init+0x258>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	4a51      	ldr	r2, [pc, #324]	; (8002734 <Timer_hal_init+0x258>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	61d3      	str	r3, [r2, #28]
 80025f6:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <Timer_hal_init+0x258>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
                HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	201c      	movs	r0, #28
 8002608:	f7fd fed9 	bl	80003be <HAL_NVIC_SetPriority>
                HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800260c:	201c      	movs	r0, #28
 800260e:	f7fd fef2 	bl	80003f6 <HAL_NVIC_EnableIRQ>
 8002612:	e03e      	b.n	8002692 <Timer_hal_init+0x1b6>
            }
            else if (handle[i].periph == TIM3)
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4413      	add	r3, r2
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4a46      	ldr	r2, [pc, #280]	; (8002738 <Timer_hal_init+0x25c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d114      	bne.n	800264e <Timer_hal_init+0x172>
            {
                __HAL_RCC_TIM3_CLK_ENABLE();
 8002624:	4b43      	ldr	r3, [pc, #268]	; (8002734 <Timer_hal_init+0x258>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	4a42      	ldr	r2, [pc, #264]	; (8002734 <Timer_hal_init+0x258>)
 800262a:	f043 0302 	orr.w	r3, r3, #2
 800262e:	61d3      	str	r3, [r2, #28]
 8002630:	4b40      	ldr	r3, [pc, #256]	; (8002734 <Timer_hal_init+0x258>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
                HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2100      	movs	r1, #0
 8002640:	201d      	movs	r0, #29
 8002642:	f7fd febc 	bl	80003be <HAL_NVIC_SetPriority>
                HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002646:	201d      	movs	r0, #29
 8002648:	f7fd fed5 	bl	80003f6 <HAL_NVIC_EnableIRQ>
 800264c:	e021      	b.n	8002692 <Timer_hal_init+0x1b6>
            }
            else if (handle[i].periph == TIM4)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a38      	ldr	r2, [pc, #224]	; (800273c <Timer_hal_init+0x260>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d114      	bne.n	8002688 <Timer_hal_init+0x1ac>
            {
                __HAL_RCC_TIM4_CLK_ENABLE();
 800265e:	4b35      	ldr	r3, [pc, #212]	; (8002734 <Timer_hal_init+0x258>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a34      	ldr	r2, [pc, #208]	; (8002734 <Timer_hal_init+0x258>)
 8002664:	f043 0304 	orr.w	r3, r3, #4
 8002668:	61d3      	str	r3, [r2, #28]
 800266a:	4b32      	ldr	r3, [pc, #200]	; (8002734 <Timer_hal_init+0x258>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
                HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	201e      	movs	r0, #30
 800267c:	f7fd fe9f 	bl	80003be <HAL_NVIC_SetPriority>
                HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002680:	201e      	movs	r0, #30
 8002682:	f7fd feb8 	bl	80003f6 <HAL_NVIC_EnableIRQ>
 8002686:	e004      	b.n	8002692 <Timer_hal_init+0x1b6>
            }
            else
            {
                timer_hal_error_handler(&ret);
 8002688:	f107 031b 	add.w	r3, r7, #27
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff19 	bl	80024c4 <timer_hal_error_handler>
            }

            if (HAL_TIM_Base_Init(&tim[i]) != HAL_OK)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	019b      	lsls	r3, r3, #6
 8002696:	4a25      	ldr	r2, [pc, #148]	; (800272c <Timer_hal_init+0x250>)
 8002698:	4413      	add	r3, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fcf0 	bl	8001080 <HAL_TIM_Base_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d004      	beq.n	80026b0 <Timer_hal_init+0x1d4>
            {
                timer_hal_error_handler(&ret);
 80026a6:	f107 031b 	add.w	r3, r7, #27
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff0a 	bl	80024c4 <timer_hal_error_handler>
            }
            sClockSourceConfig[i].ClockSource = TIM_CLOCKSOURCE_INTERNAL; // default, change with LL
 80026b0:	4a23      	ldr	r2, [pc, #140]	; (8002740 <Timer_hal_init+0x264>)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	4413      	add	r3, r2
 80026b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026bc:	601a      	str	r2, [r3, #0]
            if (HAL_TIM_ConfigClockSource(&tim[i], &sClockSourceConfig[i]) != HAL_OK)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	019b      	lsls	r3, r3, #6
 80026c2:	4a1a      	ldr	r2, [pc, #104]	; (800272c <Timer_hal_init+0x250>)
 80026c4:	1898      	adds	r0, r3, r2
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <Timer_hal_init+0x264>)
 80026cc:	4413      	add	r3, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	f7fe ff42 	bl	8001558 <HAL_TIM_ConfigClockSource>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d004      	beq.n	80026e4 <Timer_hal_init+0x208>
            {
                timer_hal_error_handler(&ret);
 80026da:	f107 031b 	add.w	r3, r7, #27
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fef0 	bl	80024c4 <timer_hal_error_handler>
            }

            if (HAL_TIM_OnePulse_Init((&tim[i]), TIM_OPMODE_REPETITIVE) != HAL_OK)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	019b      	lsls	r3, r3, #6
 80026e8:	4a10      	ldr	r2, [pc, #64]	; (800272c <Timer_hal_init+0x250>)
 80026ea:	4413      	add	r3, r2
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fdc6 	bl	8001280 <HAL_TIM_OnePulse_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <Timer_hal_init+0x228>
            {
                timer_hal_error_handler(&ret);
 80026fa:	f107 031b 	add.w	r3, r7, #27
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fee0 	bl	80024c4 <timer_hal_error_handler>
    for (int i = 0; i < TIMER_TOTAL_INSTANCE; i++)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	3301      	adds	r3, #1
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	2b03      	cmp	r3, #3
 800270e:	f77f aef1 	ble.w	80024f4 <Timer_hal_init+0x18>
            }
        }
    }
    if (ret == TIMER_HAL_ERR_OK)
 8002712:	7efb      	ldrb	r3, [r7, #27]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <Timer_hal_init+0x242>
    {
        timers_ready = ret;
 8002718:	7efa      	ldrb	r2, [r7, #27]
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <Timer_hal_init+0x268>)
 800271c:	701a      	strb	r2, [r3, #0]
    }
    return ret;
 800271e:	7efb      	ldrb	r3, [r7, #27]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000040 	.word	0x20000040
 800272c:	2000011c 	.word	0x2000011c
 8002730:	40012c00 	.word	0x40012c00
 8002734:	40021000 	.word	0x40021000
 8002738:	40000400 	.word	0x40000400
 800273c:	40000800 	.word	0x40000800
 8002740:	2000004c 	.word	0x2000004c
 8002744:	2000000c 	.word	0x2000000c

08002748 <Timer_hal_set_ISR_cb>:

/* With timer_hal_channel_t, the user function CB will be called from the ISR with the hardware channel 
 * responsible of the IRQ as parameter
 */
void Timer_hal_set_ISR_cb(conf_timer_e tmr, void (*f_pt)(timer_hal_irq_src_t))
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	71fb      	strb	r3, [r7, #7]
    int idx = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < TIMER_TOTAL_INSTANCE; i++)
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	e040      	b.n	80027e0 <Timer_hal_set_ISR_cb+0x98>
    {
        if (timer_hal_cfg_buff[i].tmr == tmr)
 800275e:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <Timer_hal_set_ISR_cb+0xac>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	4413      	add	r3, r2
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	79fa      	ldrb	r2, [r7, #7]
 800276c:	429a      	cmp	r2, r3
 800276e:	d134      	bne.n	80027da <Timer_hal_set_ISR_cb+0x92>
        {
            if (timer_hal_cfg_buff[i].periph == TIM1)
 8002770:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <Timer_hal_set_ISR_cb+0xac>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	4413      	add	r3, r2
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a1e      	ldr	r2, [pc, #120]	; (80027f8 <Timer_hal_set_ISR_cb+0xb0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d102      	bne.n	8002788 <Timer_hal_set_ISR_cb+0x40>
            {
                idx = TIMER_1_HAL;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	e022      	b.n	80027ce <Timer_hal_set_ISR_cb+0x86>
            }
            else if (timer_hal_cfg_buff[i].periph == TIM2)
 8002788:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <Timer_hal_set_ISR_cb+0xac>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	4413      	add	r3, r2
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002798:	d102      	bne.n	80027a0 <Timer_hal_set_ISR_cb+0x58>
            {
                idx = TIMER_2_HAL;
 800279a:	2301      	movs	r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	e016      	b.n	80027ce <Timer_hal_set_ISR_cb+0x86>
            }
            else if (timer_hal_cfg_buff[i].periph == TIM3)
 80027a0:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <Timer_hal_set_ISR_cb+0xac>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	4413      	add	r3, r2
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a13      	ldr	r2, [pc, #76]	; (80027fc <Timer_hal_set_ISR_cb+0xb4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d102      	bne.n	80027b8 <Timer_hal_set_ISR_cb+0x70>
            {
                idx = TIMER_3_HAL;
 80027b2:	2302      	movs	r3, #2
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	e00a      	b.n	80027ce <Timer_hal_set_ISR_cb+0x86>
            }
            else if (timer_hal_cfg_buff[i].periph == TIM4)
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <Timer_hal_set_ISR_cb+0xac>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	4413      	add	r3, r2
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <Timer_hal_set_ISR_cb+0xb8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10e      	bne.n	80027e8 <Timer_hal_set_ISR_cb+0xa0>
            {
                idx = TIMER_4_HAL;
 80027ca:	2303      	movs	r3, #3
 80027cc:	60fb      	str	r3, [r7, #12]
            }
            else
            {
                break;
            }            
            timer_hal_ISR_cb[idx] = f_pt; // indexing with timer_hal_cfg_buff[i].tmr to have freedom in defining the order in conf.
 80027ce:	490d      	ldr	r1, [pc, #52]	; (8002804 <Timer_hal_set_ISR_cb+0xbc>)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            break;
 80027d8:	e007      	b.n	80027ea <Timer_hal_set_ISR_cb+0xa2>
    for (int i = 0; i < TIMER_TOTAL_INSTANCE; i++)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	3301      	adds	r3, #1
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	ddbb      	ble.n	800275e <Timer_hal_set_ISR_cb+0x16>
        }
    }
}
 80027e6:	e000      	b.n	80027ea <Timer_hal_set_ISR_cb+0xa2>
                break;
 80027e8:	bf00      	nop
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	20000040 	.word	0x20000040
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	40000400 	.word	0x40000400
 8002800:	40000800 	.word	0x40000800
 8002804:	20000030 	.word	0x20000030

08002808 <Timer_hal_OC_init>:
// TIM_OCMODE_PWM2
// TIM_OCMODE_FORCED_ACTIVE
// TIM_OCMODE_FORCED_INACTIVE

timer_hal_err_t Timer_hal_OC_init(const timer_hal_oc_conf_t *handle)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
    timer_hal_err_t ret = TIMER_HAL_ERR_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]
    oc_hal_cfg_buff = handle;
 8002814:	4aac      	ldr	r2, [pc, #688]	; (8002ac8 <Timer_hal_OC_init+0x2c0>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6013      	str	r3, [r2, #0]

    if (timers_ready != TIMER_HAL_ERR_OK)
 800281a:	4bac      	ldr	r3, [pc, #688]	; (8002acc <Timer_hal_OC_init+0x2c4>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <Timer_hal_OC_init+0x1e>
    {
        return TIMER_HAL_ERR_NO_TIMER;
 8002822:	2302      	movs	r3, #2
 8002824:	e17b      	b.n	8002b1e <Timer_hal_OC_init+0x316>
    }

    for (int i = 0; i < OC_TOTAL_INSTANCE; i++)
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	e173      	b.n	8002b14 <Timer_hal_OC_init+0x30c>
    {
        if (handle[i].tmr != CONF_TIMER_ENUM_UNUSED)
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	461a      	mov	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	785b      	ldrb	r3, [r3, #1]
 800283e:	2b02      	cmp	r3, #2
 8002840:	f000 8165 	beq.w	8002b0e <Timer_hal_OC_init+0x306>
        {
            int j = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
            while (timer_hal_cfg_buff[j].tmr != handle[i].tmr)
 8002848:	e00a      	b.n	8002860 <Timer_hal_OC_init+0x58>
            {
                // Find the right index in the timer conf, so can be used to
                // index the tim[] for the OC conf. Works based on the fact oc conf is always a subset of
                // timer conf for hardware reasons.
                if (j > TIMER_TOTAL_INSTANCE)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b04      	cmp	r3, #4
 800284e:	dd04      	ble.n	800285a <Timer_hal_OC_init+0x52>
                    timer_hal_error_handler(&ret);
 8002850:	f107 030f 	add.w	r3, r7, #15
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fe35 	bl	80024c4 <timer_hal_error_handler>
                j++;
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	3301      	adds	r3, #1
 800285e:	613b      	str	r3, [r7, #16]
            while (timer_hal_cfg_buff[j].tmr != handle[i].tmr)
 8002860:	4b9b      	ldr	r3, [pc, #620]	; (8002ad0 <Timer_hal_OC_init+0x2c8>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	4413      	add	r3, r2
 800286a:	7819      	ldrb	r1, [r3, #0]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	461a      	mov	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	785b      	ldrb	r3, [r3, #1]
 800287e:	4299      	cmp	r1, r3
 8002880:	d1e3      	bne.n	800284a <Timer_hal_OC_init+0x42>
            }
            if (HAL_TIM_OC_Init(&tim[j]) != HAL_OK) // ...hence search with j
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	019b      	lsls	r3, r3, #6
 8002886:	4a93      	ldr	r2, [pc, #588]	; (8002ad4 <Timer_hal_OC_init+0x2cc>)
 8002888:	4413      	add	r3, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fc2c 	bl	80010e8 <HAL_TIM_OC_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <Timer_hal_OC_init+0x98>
            {
                timer_hal_error_handler(&ret);
 8002896:	f107 030f 	add.w	r3, r7, #15
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fe12 	bl	80024c4 <timer_hal_error_handler>
            }
            // i is used only for the handle[], j for the internal timer structs.
            // handle[i] configures the j-th timer struct.
            sMasterConfig[j].MasterOutputTrigger = TIM_TRGO_RESET;
 80028a0:	4a8d      	ldr	r2, [pc, #564]	; (8002ad8 <Timer_hal_OC_init+0x2d0>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2100      	movs	r1, #0
 80028a6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            sMasterConfig[j].MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028aa:	4a8b      	ldr	r2, [pc, #556]	; (8002ad8 <Timer_hal_OC_init+0x2d0>)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	2200      	movs	r2, #0
 80028b4:	605a      	str	r2, [r3, #4]
            if (HAL_TIMEx_MasterConfigSynchronization(&tim[j], &sMasterConfig[j]) != HAL_OK)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	019b      	lsls	r3, r3, #6
 80028ba:	4a86      	ldr	r2, [pc, #536]	; (8002ad4 <Timer_hal_OC_init+0x2cc>)
 80028bc:	1898      	adds	r0, r3, r2
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4a85      	ldr	r2, [pc, #532]	; (8002ad8 <Timer_hal_OC_init+0x2d0>)
 80028c4:	4413      	add	r3, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	f7ff f9a2 	bl	8001c10 <HAL_TIMEx_MasterConfigSynchronization>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d004      	beq.n	80028dc <Timer_hal_OC_init+0xd4>
            {
                timer_hal_error_handler(&ret);
 80028d2:	f107 030f 	add.w	r3, r7, #15
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fdf4 	bl	80024c4 <timer_hal_error_handler>
            }

            sConfigOC[j].OCMode = handle[i].mode;
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	461a      	mov	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	6899      	ldr	r1, [r3, #8]
 80028ee:	487b      	ldr	r0, [pc, #492]	; (8002adc <Timer_hal_OC_init+0x2d4>)
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4403      	add	r3, r0
 80028fc:	6019      	str	r1, [r3, #0]

            sConfigOC[j].Pulse = 0;
 80028fe:	4977      	ldr	r1, [pc, #476]	; (8002adc <Timer_hal_OC_init+0x2d4>)
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3304      	adds	r3, #4
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
            sConfigOC[j].OCPolarity = handle[i].pol;
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	461a      	mov	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	68d9      	ldr	r1, [r3, #12]
 8002924:	486d      	ldr	r0, [pc, #436]	; (8002adc <Timer_hal_OC_init+0x2d4>)
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4403      	add	r3, r0
 8002932:	3308      	adds	r3, #8
 8002934:	6019      	str	r1, [r3, #0]

            sConfigOC[j].OCFastMode = TIM_OCFAST_DISABLE;
 8002936:	4969      	ldr	r1, [pc, #420]	; (8002adc <Timer_hal_OC_init+0x2d4>)
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	3310      	adds	r3, #16
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
            if (HAL_TIM_OC_ConfigChannel(&tim[j], &sConfigOC[j], handle[i].channel) != HAL_OK)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	019b      	lsls	r3, r3, #6
 800294e:	4a61      	ldr	r2, [pc, #388]	; (8002ad4 <Timer_hal_OC_init+0x2cc>)
 8002950:	1898      	adds	r0, r3, r2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4a5f      	ldr	r2, [pc, #380]	; (8002adc <Timer_hal_OC_init+0x2d4>)
 800295e:	1899      	adds	r1, r3, r2
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	461a      	mov	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4413      	add	r3, r2
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	461a      	mov	r2, r3
 8002974:	f7fe fcca 	bl	800130c <HAL_TIM_OC_ConfigChannel>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <Timer_hal_OC_init+0x180>
            {
                timer_hal_error_handler(&ret);
 800297e:	f107 030f 	add.w	r3, r7, #15
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fd9e 	bl	80024c4 <timer_hal_error_handler>
            }

            if (handle[i].interrupt == TIMER_HAL_INT_ON)
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	461a      	mov	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4413      	add	r3, r2
 8002998:	7c1b      	ldrb	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f040 80b7 	bne.w	8002b0e <Timer_hal_OC_init+0x306>
            {
                switch (handle[i].channel)
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	461a      	mov	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4413      	add	r3, r2
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	d858      	bhi.n	8002a68 <Timer_hal_OC_init+0x260>
 80029b6:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <Timer_hal_OC_init+0x1b4>)
 80029b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029bc:	080029f1 	.word	0x080029f1
 80029c0:	08002a69 	.word	0x08002a69
 80029c4:	08002a69 	.word	0x08002a69
 80029c8:	08002a69 	.word	0x08002a69
 80029cc:	08002a0f 	.word	0x08002a0f
 80029d0:	08002a69 	.word	0x08002a69
 80029d4:	08002a69 	.word	0x08002a69
 80029d8:	08002a69 	.word	0x08002a69
 80029dc:	08002a2d 	.word	0x08002a2d
 80029e0:	08002a69 	.word	0x08002a69
 80029e4:	08002a69 	.word	0x08002a69
 80029e8:	08002a69 	.word	0x08002a69
 80029ec:	08002a4b 	.word	0x08002a4b
                {
                case TIM_CHANNEL_1:
                    __HAL_TIM_ENABLE_IT(&tim[j], TIM_IT_CC1);
 80029f0:	4a38      	ldr	r2, [pc, #224]	; (8002ad4 <Timer_hal_OC_init+0x2cc>)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	019b      	lsls	r3, r3, #6
 80029f6:	4413      	add	r3, r2
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	4935      	ldr	r1, [pc, #212]	; (8002ad4 <Timer_hal_OC_init+0x2cc>)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	019b      	lsls	r3, r3, #6
 8002a02:	440b      	add	r3, r1
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0202 	orr.w	r2, r2, #2
 8002a0a:	60da      	str	r2, [r3, #12]
                    break;
 8002a0c:	e032      	b.n	8002a74 <Timer_hal_OC_init+0x26c>
                case TIM_CHANNEL_2:
                    __HAL_TIM_ENABLE_IT(&tim[j], TIM_IT_CC2);
 8002a0e:	4a31      	ldr	r2, [pc, #196]	; (8002ad4 <Timer_hal_OC_init+0x2cc>)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	019b      	lsls	r3, r3, #6
 8002a14:	4413      	add	r3, r2
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	492e      	ldr	r1, [pc, #184]	; (8002ad4 <Timer_hal_OC_init+0x2cc>)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	019b      	lsls	r3, r3, #6
 8002a20:	440b      	add	r3, r1
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0204 	orr.w	r2, r2, #4
 8002a28:	60da      	str	r2, [r3, #12]
                    break;
 8002a2a:	e023      	b.n	8002a74 <Timer_hal_OC_init+0x26c>
                case TIM_CHANNEL_3:
                    __HAL_TIM_ENABLE_IT(&tim[j], TIM_IT_CC3);
 8002a2c:	4a29      	ldr	r2, [pc, #164]	; (8002ad4 <Timer_hal_OC_init+0x2cc>)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	019b      	lsls	r3, r3, #6
 8002a32:	4413      	add	r3, r2
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	4926      	ldr	r1, [pc, #152]	; (8002ad4 <Timer_hal_OC_init+0x2cc>)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	019b      	lsls	r3, r3, #6
 8002a3e:	440b      	add	r3, r1
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0208 	orr.w	r2, r2, #8
 8002a46:	60da      	str	r2, [r3, #12]
                    break;
 8002a48:	e014      	b.n	8002a74 <Timer_hal_OC_init+0x26c>
                case TIM_CHANNEL_4:
                    __HAL_TIM_ENABLE_IT(&tim[j], TIM_IT_CC4);
 8002a4a:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <Timer_hal_OC_init+0x2cc>)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	019b      	lsls	r3, r3, #6
 8002a50:	4413      	add	r3, r2
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	491f      	ldr	r1, [pc, #124]	; (8002ad4 <Timer_hal_OC_init+0x2cc>)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	019b      	lsls	r3, r3, #6
 8002a5c:	440b      	add	r3, r1
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0210 	orr.w	r2, r2, #16
 8002a64:	60da      	str	r2, [r3, #12]
                    break;
 8002a66:	e005      	b.n	8002a74 <Timer_hal_OC_init+0x26c>
                default:
                    timer_hal_error_handler(&ret);
 8002a68:	f107 030f 	add.w	r3, r7, #15
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fd29 	bl	80024c4 <timer_hal_error_handler>
                    break;
 8002a72:	bf00      	nop
                }

                if (timer_hal_cfg_buff[j].periph == TIM1)
 8002a74:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <Timer_hal_OC_init+0x2c8>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	4413      	add	r3, r2
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a17      	ldr	r2, [pc, #92]	; (8002ae0 <Timer_hal_OC_init+0x2d8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d104      	bne.n	8002a90 <Timer_hal_OC_init+0x288>
                    IntHal_vector_register(timer1_isr, TIM1_IRQHandler_num);
 8002a86:	2105      	movs	r1, #5
 8002a88:	4816      	ldr	r0, [pc, #88]	; (8002ae4 <Timer_hal_OC_init+0x2dc>)
 8002a8a:	f7ff fc07 	bl	800229c <IntHal_vector_register>
 8002a8e:	e03e      	b.n	8002b0e <Timer_hal_OC_init+0x306>
                else if (timer_hal_cfg_buff[j].periph == TIM2)
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <Timer_hal_OC_init+0x2c8>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	4413      	add	r3, r2
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa0:	d104      	bne.n	8002aac <Timer_hal_OC_init+0x2a4>
                    IntHal_vector_register(timer2_isr, TIM2_IRQHandler_num);
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	4810      	ldr	r0, [pc, #64]	; (8002ae8 <Timer_hal_OC_init+0x2e0>)
 8002aa6:	f7ff fbf9 	bl	800229c <IntHal_vector_register>
 8002aaa:	e030      	b.n	8002b0e <Timer_hal_OC_init+0x306>
                else if (timer_hal_cfg_buff[j].periph == TIM3)
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <Timer_hal_OC_init+0x2c8>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	4413      	add	r3, r2
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <Timer_hal_OC_init+0x2e4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d11a      	bne.n	8002af4 <Timer_hal_OC_init+0x2ec>
                    IntHal_vector_register(timer3_isr, TIM3_IRQHandler_num);
 8002abe:	2103      	movs	r1, #3
 8002ac0:	480b      	ldr	r0, [pc, #44]	; (8002af0 <Timer_hal_OC_init+0x2e8>)
 8002ac2:	f7ff fbeb 	bl	800229c <IntHal_vector_register>
 8002ac6:	e022      	b.n	8002b0e <Timer_hal_OC_init+0x306>
 8002ac8:	20000048 	.word	0x20000048
 8002acc:	2000000c 	.word	0x2000000c
 8002ad0:	20000040 	.word	0x20000040
 8002ad4:	2000011c 	.word	0x2000011c
 8002ad8:	2000008c 	.word	0x2000008c
 8002adc:	200000ac 	.word	0x200000ac
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	080024b9 	.word	0x080024b9
 8002ae8:	080024ad 	.word	0x080024ad
 8002aec:	40000400 	.word	0x40000400
 8002af0:	08002415 	.word	0x08002415
                else if (timer_hal_cfg_buff[j].periph == TIM4)
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <Timer_hal_OC_init+0x320>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	4413      	add	r3, r2
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <Timer_hal_OC_init+0x324>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d103      	bne.n	8002b0e <Timer_hal_OC_init+0x306>
                    IntHal_vector_register(timer4_isr, TIM4_IRQHandler_num);
 8002b06:	2102      	movs	r1, #2
 8002b08:	4809      	ldr	r0, [pc, #36]	; (8002b30 <Timer_hal_OC_init+0x328>)
 8002b0a:	f7ff fbc7 	bl	800229c <IntHal_vector_register>
    for (int i = 0; i < OC_TOTAL_INSTANCE; i++)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3301      	adds	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f77f ae88 	ble.w	800282c <Timer_hal_OC_init+0x24>
                {
                }
            }
        }
    }
    return ret;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000040 	.word	0x20000040
 8002b2c:	40000800 	.word	0x40000800
 8002b30:	0800236d 	.word	0x0800236d

08002b34 <Timer_hal_OC_start>:

void Timer_hal_OC_start(conf_oc_e oc)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < CONF_OC_ENUM_UNUSED; i++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	e03d      	b.n	8002bc0 <Timer_hal_OC_start+0x8c>
    {
        int j = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
        while (timer_hal_cfg_buff[j].tmr != oc_hal_cfg_buff[i].tmr)
 8002b48:	e00a      	b.n	8002b60 <Timer_hal_OC_start+0x2c>
        {
            if (j > TIMER_TOTAL_INSTANCE)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	dd04      	ble.n	8002b5a <Timer_hal_OC_start+0x26>
            {
                timer_hal_err_t *ret;          // for compliance
                timer_hal_error_handler(&ret); // for further error implementation
 8002b50:	f107 030c 	add.w	r3, r7, #12
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fcb5 	bl	80024c4 <timer_hal_error_handler>
            }
            j++;
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	613b      	str	r3, [r7, #16]
        while (timer_hal_cfg_buff[j].tmr != oc_hal_cfg_buff[i].tmr)
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <Timer_hal_OC_start+0x9c>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	4413      	add	r3, r2
 8002b6a:	7819      	ldrb	r1, [r3, #0]
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <Timer_hal_OC_start+0xa0>)
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4403      	add	r3, r0
 8002b7c:	785b      	ldrb	r3, [r3, #1]
 8002b7e:	4299      	cmp	r1, r3
 8002b80:	d1e3      	bne.n	8002b4a <Timer_hal_OC_start+0x16>
        }
        if (oc_hal_cfg_buff[i].oc_enum == oc)
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <Timer_hal_OC_start+0xa0>)
 8002b84:	6819      	ldr	r1, [r3, #0]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	79fa      	ldrb	r2, [r7, #7]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d10f      	bne.n	8002bba <Timer_hal_OC_start+0x86>
        {
            HAL_TIM_OC_Start(&tim[j], oc_hal_cfg_buff[i].channel);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	019b      	lsls	r3, r3, #6
 8002b9e:	4a0e      	ldr	r2, [pc, #56]	; (8002bd8 <Timer_hal_OC_start+0xa4>)
 8002ba0:	1898      	adds	r0, r3, r2
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <Timer_hal_OC_start+0xa0>)
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f7fe facb 	bl	8001150 <HAL_TIM_OC_Start>
    for (int i = 0; i < CONF_OC_ENUM_UNUSED; i++)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	ddbe      	ble.n	8002b44 <Timer_hal_OC_start+0x10>
        }
    }
}
 8002bc6:	bf00      	nop
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000040 	.word	0x20000040
 8002bd4:	20000048 	.word	0x20000048
 8002bd8:	2000011c 	.word	0x2000011c

08002bdc <Timer_hal_OC_get>:

uint32_t Timer_hal_OC_get(conf_oc_e oc)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
    int i = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
    // search the OC conf
    while (oc_hal_cfg_buff[i].oc_enum != oc)
 8002bea:	e00a      	b.n	8002c02 <Timer_hal_OC_get+0x26>
    {
        if (i > CONF_OC_ENUM_UNUSED)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	dd04      	ble.n	8002bfc <Timer_hal_OC_get+0x20>
        {
            timer_hal_err_t *ret;          // for compliance
            timer_hal_error_handler(&ret); // for further error implementation
 8002bf2:	f107 030c 	add.w	r3, r7, #12
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fc64 	bl	80024c4 <timer_hal_error_handler>
        }
        i++;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	617b      	str	r3, [r7, #20]
    while (oc_hal_cfg_buff[i].oc_enum != oc)
 8002c02:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <Timer_hal_OC_get+0xfc>)
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	79fa      	ldrb	r2, [r7, #7]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d1e8      	bne.n	8002bec <Timer_hal_OC_get+0x10>
    }

    int j = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
    // search the corresponding timer
    while (oc_hal_cfg_buff[i].tmr != timer_hal_cfg_buff[j].tmr)
 8002c1e:	e00a      	b.n	8002c36 <Timer_hal_OC_get+0x5a>
    {
        if (j > CONF_TIMER_ENUM_UNUSED)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	dd04      	ble.n	8002c30 <Timer_hal_OC_get+0x54>
        {
            timer_hal_err_t *ret;          // for compliance
            timer_hal_error_handler(&ret); // for further error implementation
 8002c26:	f107 0308 	add.w	r3, r7, #8
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fc4a 	bl	80024c4 <timer_hal_error_handler>
        }
        j++;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	3301      	adds	r3, #1
 8002c34:	613b      	str	r3, [r7, #16]
    while (oc_hal_cfg_buff[i].tmr != timer_hal_cfg_buff[j].tmr)
 8002c36:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <Timer_hal_OC_get+0xfc>)
 8002c38:	6819      	ldr	r1, [r3, #0]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	785a      	ldrb	r2, [r3, #1]
 8002c48:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <Timer_hal_OC_get+0x100>)
 8002c4a:	6819      	ldr	r1, [r3, #0]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	440b      	add	r3, r1
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1e3      	bne.n	8002c20 <Timer_hal_OC_get+0x44>
    }
    return __HAL_TIM_GET_COMPARE(&tim[j], oc_hal_cfg_buff[i].channel);
 8002c58:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <Timer_hal_OC_get+0xfc>)
 8002c5a:	6819      	ldr	r1, [r3, #0]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <Timer_hal_OC_get+0xa0>
 8002c6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <Timer_hal_OC_get+0x104>)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	019b      	lsls	r3, r3, #6
 8002c74:	4413      	add	r3, r2
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	e029      	b.n	8002cd0 <Timer_hal_OC_get+0xf4>
 8002c7c:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <Timer_hal_OC_get+0xfc>)
 8002c7e:	6819      	ldr	r1, [r3, #0]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d106      	bne.n	8002ca0 <Timer_hal_OC_get+0xc4>
 8002c92:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <Timer_hal_OC_get+0x104>)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	019b      	lsls	r3, r3, #6
 8002c98:	4413      	add	r3, r2
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	e017      	b.n	8002cd0 <Timer_hal_OC_get+0xf4>
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <Timer_hal_OC_get+0xfc>)
 8002ca2:	6819      	ldr	r1, [r3, #0]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d106      	bne.n	8002cc4 <Timer_hal_OC_get+0xe8>
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <Timer_hal_OC_get+0x104>)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	019b      	lsls	r3, r3, #6
 8002cbc:	4413      	add	r3, r2
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	e005      	b.n	8002cd0 <Timer_hal_OC_get+0xf4>
 8002cc4:	4a06      	ldr	r2, [pc, #24]	; (8002ce0 <Timer_hal_OC_get+0x104>)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	019b      	lsls	r3, r3, #6
 8002cca:	4413      	add	r3, r2
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000048 	.word	0x20000048
 8002cdc:	20000040 	.word	0x20000040
 8002ce0:	2000011c 	.word	0x2000011c

08002ce4 <Timer_hal_OC_period>:

void Timer_hal_OC_period(conf_oc_e oc, uint32_t val)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	6039      	str	r1, [r7, #0]
 8002cee:	71fb      	strb	r3, [r7, #7]
        int i = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
        // search the OC conf
        while (oc_hal_cfg_buff[i].oc_enum != oc)
 8002cf4:	e00a      	b.n	8002d0c <Timer_hal_OC_period+0x28>
        {
            if (i > CONF_OC_ENUM_UNUSED)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	dd04      	ble.n	8002d06 <Timer_hal_OC_period+0x22>
            {
                timer_hal_err_t *ret;          // for compliance
                timer_hal_error_handler(&ret); // for further error implementation
 8002cfc:	f107 030c 	add.w	r3, r7, #12
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fbdf 	bl	80024c4 <timer_hal_error_handler>
            }
            i++;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
        while (oc_hal_cfg_buff[i].oc_enum != oc)
 8002d0c:	4b37      	ldr	r3, [pc, #220]	; (8002dec <Timer_hal_OC_period+0x108>)
 8002d0e:	6819      	ldr	r1, [r3, #0]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	79fa      	ldrb	r2, [r7, #7]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1e8      	bne.n	8002cf6 <Timer_hal_OC_period+0x12>
        }
        
        int j = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]
        // search the corresponding timer
        while (oc_hal_cfg_buff[i].tmr != timer_hal_cfg_buff[j].tmr)
 8002d28:	e00a      	b.n	8002d40 <Timer_hal_OC_period+0x5c>
        {
            if (j > CONF_TIMER_ENUM_UNUSED)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	dd04      	ble.n	8002d3a <Timer_hal_OC_period+0x56>
            {
                timer_hal_err_t *ret;          // for compliance
                timer_hal_error_handler(&ret); // for further error implementation
 8002d30:	f107 0308 	add.w	r3, r7, #8
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fbc5 	bl	80024c4 <timer_hal_error_handler>
            }
            j++;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	613b      	str	r3, [r7, #16]
        while (oc_hal_cfg_buff[i].tmr != timer_hal_cfg_buff[j].tmr)
 8002d40:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <Timer_hal_OC_period+0x108>)
 8002d42:	6819      	ldr	r1, [r3, #0]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	785a      	ldrb	r2, [r3, #1]
 8002d52:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <Timer_hal_OC_period+0x10c>)
 8002d54:	6819      	ldr	r1, [r3, #0]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	440b      	add	r3, r1
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d1e3      	bne.n	8002d2a <Timer_hal_OC_period+0x46>
        }
        __HAL_TIM_SET_COMPARE(&tim[j], oc_hal_cfg_buff[i].channel, val);
 8002d62:	4b22      	ldr	r3, [pc, #136]	; (8002dec <Timer_hal_OC_period+0x108>)
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d107      	bne.n	8002d88 <Timer_hal_OC_period+0xa4>
 8002d78:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <Timer_hal_OC_period+0x110>)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	019b      	lsls	r3, r3, #6
 8002d7e:	4413      	add	r3, r2
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d86:	e02c      	b.n	8002de2 <Timer_hal_OC_period+0xfe>
        __HAL_TIM_SET_COMPARE(&tim[j], oc_hal_cfg_buff[i].channel, val);
 8002d88:	4b18      	ldr	r3, [pc, #96]	; (8002dec <Timer_hal_OC_period+0x108>)
 8002d8a:	6819      	ldr	r1, [r3, #0]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d107      	bne.n	8002dae <Timer_hal_OC_period+0xca>
 8002d9e:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <Timer_hal_OC_period+0x110>)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	019b      	lsls	r3, r3, #6
 8002da4:	4413      	add	r3, r2
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002dac:	e019      	b.n	8002de2 <Timer_hal_OC_period+0xfe>
        __HAL_TIM_SET_COMPARE(&tim[j], oc_hal_cfg_buff[i].channel, val);
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <Timer_hal_OC_period+0x108>)
 8002db0:	6819      	ldr	r1, [r3, #0]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d107      	bne.n	8002dd4 <Timer_hal_OC_period+0xf0>
 8002dc4:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <Timer_hal_OC_period+0x110>)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	019b      	lsls	r3, r3, #6
 8002dca:	4413      	add	r3, r2
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002dd2:	e006      	b.n	8002de2 <Timer_hal_OC_period+0xfe>
        __HAL_TIM_SET_COMPARE(&tim[j], oc_hal_cfg_buff[i].channel, val);
 8002dd4:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <Timer_hal_OC_period+0x110>)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	019b      	lsls	r3, r3, #6
 8002dda:	4413      	add	r3, r2
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000048 	.word	0x20000048
 8002df0:	20000040 	.word	0x20000040
 8002df4:	2000011c 	.word	0x2000011c

08002df8 <Timer_hal_PWM_init>:

timer_hal_err_t Timer_hal_PWM_init(const timer_hal_pwm_conf_t *handle)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
    timer_hal_err_t ret = TIMER_HAL_ERR_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]
    pwm_hal_cfg_buff = handle;
 8002e04:	4a62      	ldr	r2, [pc, #392]	; (8002f90 <Timer_hal_PWM_init+0x198>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6013      	str	r3, [r2, #0]
    if (timers_ready != TIMER_HAL_ERR_OK)
 8002e0a:	4b62      	ldr	r3, [pc, #392]	; (8002f94 <Timer_hal_PWM_init+0x19c>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <Timer_hal_PWM_init+0x1e>
    {
        return TIMER_HAL_ERR_NO_TIMER;
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0b8      	b.n	8002f88 <Timer_hal_PWM_init+0x190>
    }
    
    for (int i = 0; i < PWM_TOTAL_INSTANCE; i++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	e0b0      	b.n	8002f7e <Timer_hal_PWM_init+0x186>
    {
        
        if (handle[i].tmr != CONF_TIMER_ENUM_UNUSED)
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	461a      	mov	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	785b      	ldrb	r3, [r3, #1]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	f000 80a2 	beq.w	8002f78 <Timer_hal_PWM_init+0x180>
        {
            int j = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]
            while (timer_hal_cfg_buff[j].tmr != handle[i].tmr)
 8002e38:	e00a      	b.n	8002e50 <Timer_hal_PWM_init+0x58>
            {
                // Find the right index in the timer conf, so can be used to
                // index the tim[] for the OC conf. Works based on the fact oc conf is always a subset of
                // timer conf for hardware reasons.
                if (j > TIMER_TOTAL_INSTANCE)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	dd04      	ble.n	8002e4a <Timer_hal_PWM_init+0x52>
                    timer_hal_error_handler(&ret);
 8002e40:	f107 030f 	add.w	r3, r7, #15
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fb3d 	bl	80024c4 <timer_hal_error_handler>
                j++;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
            while (timer_hal_cfg_buff[j].tmr != handle[i].tmr)
 8002e50:	4b51      	ldr	r3, [pc, #324]	; (8002f98 <Timer_hal_PWM_init+0x1a0>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	4413      	add	r3, r2
 8002e5a:	7819      	ldrb	r1, [r3, #0]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	461a      	mov	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	785b      	ldrb	r3, [r3, #1]
 8002e6e:	4299      	cmp	r1, r3
 8002e70:	d1e3      	bne.n	8002e3a <Timer_hal_PWM_init+0x42>
            }
            if (HAL_TIM_PWM_Init(&tim[j]) != HAL_OK)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	019b      	lsls	r3, r3, #6
 8002e76:	4a49      	ldr	r2, [pc, #292]	; (8002f9c <Timer_hal_PWM_init+0x1a4>)
 8002e78:	4413      	add	r3, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe f99a 	bl	80011b4 <HAL_TIM_PWM_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d004      	beq.n	8002e90 <Timer_hal_PWM_init+0x98>
            {
                timer_hal_error_handler(&ret);
 8002e86:	f107 030f 	add.w	r3, r7, #15
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fb1a 	bl	80024c4 <timer_hal_error_handler>
            }
            sMasterConfig[j].MasterOutputTrigger = TIM_TRGO_RESET;
 8002e90:	4a43      	ldr	r2, [pc, #268]	; (8002fa0 <Timer_hal_PWM_init+0x1a8>)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2100      	movs	r1, #0
 8002e96:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            sMasterConfig[j].MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e9a:	4a41      	ldr	r2, [pc, #260]	; (8002fa0 <Timer_hal_PWM_init+0x1a8>)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	605a      	str	r2, [r3, #4]
            if (HAL_TIMEx_MasterConfigSynchronization(&tim[j], &sMasterConfig[j]) != HAL_OK)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	019b      	lsls	r3, r3, #6
 8002eaa:	4a3c      	ldr	r2, [pc, #240]	; (8002f9c <Timer_hal_PWM_init+0x1a4>)
 8002eac:	1898      	adds	r0, r3, r2
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4a3b      	ldr	r2, [pc, #236]	; (8002fa0 <Timer_hal_PWM_init+0x1a8>)
 8002eb4:	4413      	add	r3, r2
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f7fe feaa 	bl	8001c10 <HAL_TIMEx_MasterConfigSynchronization>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d004      	beq.n	8002ecc <Timer_hal_PWM_init+0xd4>
            {
                timer_hal_error_handler(&ret);
 8002ec2:	f107 030f 	add.w	r3, r7, #15
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fafc 	bl	80024c4 <timer_hal_error_handler>
            }

            sConfigOC[j].OCMode = handle[i].mode; // default, change with LL
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	6899      	ldr	r1, [r3, #8]
 8002ede:	4831      	ldr	r0, [pc, #196]	; (8002fa4 <Timer_hal_PWM_init+0x1ac>)
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4403      	add	r3, r0
 8002eec:	6019      	str	r1, [r3, #0]

            sConfigOC[j].Pulse = 0;
 8002eee:	492d      	ldr	r1, [pc, #180]	; (8002fa4 <Timer_hal_PWM_init+0x1ac>)
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3304      	adds	r3, #4
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
            sConfigOC[j].OCPolarity = handle[i].pol;
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	68d9      	ldr	r1, [r3, #12]
 8002f14:	4823      	ldr	r0, [pc, #140]	; (8002fa4 <Timer_hal_PWM_init+0x1ac>)
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4403      	add	r3, r0
 8002f22:	3308      	adds	r3, #8
 8002f24:	6019      	str	r1, [r3, #0]
            sConfigOC[j].OCFastMode = TIM_OCFAST_DISABLE;
 8002f26:	491f      	ldr	r1, [pc, #124]	; (8002fa4 <Timer_hal_PWM_init+0x1ac>)
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3310      	adds	r3, #16
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
            if (HAL_TIM_PWM_ConfigChannel(&tim[j], &sConfigOC[j], handle[i].channel) != HAL_OK)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	019b      	lsls	r3, r3, #6
 8002f3e:	4a17      	ldr	r2, [pc, #92]	; (8002f9c <Timer_hal_PWM_init+0x1a4>)
 8002f40:	1898      	adds	r0, r3, r2
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <Timer_hal_PWM_init+0x1ac>)
 8002f4e:	1899      	adds	r1, r3, r2
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f7fe fa32 	bl	80013cc <HAL_TIM_PWM_ConfigChannel>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d004      	beq.n	8002f78 <Timer_hal_PWM_init+0x180>
            {
                timer_hal_error_handler(&ret);
 8002f6e:	f107 030f 	add.w	r3, r7, #15
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff faa6 	bl	80024c4 <timer_hal_error_handler>
    for (int i = 0; i < PWM_TOTAL_INSTANCE; i++)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f77f af4b 	ble.w	8002e1c <Timer_hal_PWM_init+0x24>
            }
        }
    }
    return ret;
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000044 	.word	0x20000044
 8002f94:	2000000c 	.word	0x2000000c
 8002f98:	20000040 	.word	0x20000040
 8002f9c:	2000011c 	.word	0x2000011c
 8002fa0:	2000008c 	.word	0x2000008c
 8002fa4:	200000ac 	.word	0x200000ac

08002fa8 <Timer_hal_PWM_start>:

void Timer_hal_PWM_start(conf_pwm_e pwm)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < CONF_PWM_ENUM_UNUSED; i++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e03e      	b.n	8003036 <Timer_hal_PWM_start+0x8e>
    {
        int j = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	613b      	str	r3, [r7, #16]
        while (timer_hal_cfg_buff[j].tmr != pwm_hal_cfg_buff[i].tmr)
 8002fbc:	e00a      	b.n	8002fd4 <Timer_hal_PWM_start+0x2c>
        {
            if (j > TIMER_TOTAL_INSTANCE)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	dd04      	ble.n	8002fce <Timer_hal_PWM_start+0x26>
            {
                timer_hal_err_t *ret;          // for compliance
                timer_hal_error_handler(&ret); // for further error implementation
 8002fc4:	f107 030c 	add.w	r3, r7, #12
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fa7b 	bl	80024c4 <timer_hal_error_handler>
            }
            j++;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	613b      	str	r3, [r7, #16]
        while (timer_hal_cfg_buff[j].tmr != pwm_hal_cfg_buff[i].tmr)
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <Timer_hal_PWM_start+0x9c>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	4413      	add	r3, r2
 8002fde:	7819      	ldrb	r1, [r3, #0]
 8002fe0:	4b19      	ldr	r3, [pc, #100]	; (8003048 <Timer_hal_PWM_start+0xa0>)
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4403      	add	r3, r0
 8002ff0:	785b      	ldrb	r3, [r3, #1]
 8002ff2:	4299      	cmp	r1, r3
 8002ff4:	d1e3      	bne.n	8002fbe <Timer_hal_PWM_start+0x16>
        }
        if (pwm_hal_cfg_buff[i].pwm_enum == pwm)
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <Timer_hal_PWM_start+0xa0>)
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	79fa      	ldrb	r2, [r7, #7]
 800300a:	429a      	cmp	r2, r3
 800300c:	d110      	bne.n	8003030 <Timer_hal_PWM_start+0x88>
        {
            HAL_TIM_PWM_Start(&tim[j], pwm_hal_cfg_buff[i].channel);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	4a0e      	ldr	r2, [pc, #56]	; (800304c <Timer_hal_PWM_start+0xa4>)
 8003014:	1898      	adds	r0, r3, r2
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <Timer_hal_PWM_start+0xa0>)
 8003018:	6819      	ldr	r1, [r3, #0]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4619      	mov	r1, r3
 800302a:	f7fe f8f7 	bl	800121c <HAL_TIM_PWM_Start>
            break;
 800302e:	e005      	b.n	800303c <Timer_hal_PWM_start+0x94>
    for (int i = 0; i < CONF_PWM_ENUM_UNUSED; i++)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	3301      	adds	r3, #1
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	ddbd      	ble.n	8002fb8 <Timer_hal_PWM_start+0x10>
        }
    }
}
 800303c:	bf00      	nop
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000040 	.word	0x20000040
 8003048:	20000044 	.word	0x20000044
 800304c:	2000011c 	.word	0x2000011c

08003050 <Timer_hal_PWM_DC>:

void Timer_hal_PWM_DC(conf_pwm_e oc, uint32_t val)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	6039      	str	r1, [r7, #0]
 800305a:	71fb      	strb	r3, [r7, #7]
        int i = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
        // search the OC conf
        while (pwm_hal_cfg_buff[i].pwm_enum != oc)
 8003060:	e00a      	b.n	8003078 <Timer_hal_PWM_DC+0x28>
        {
            if (i > CONF_PWM_ENUM_UNUSED)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b01      	cmp	r3, #1
 8003066:	dd04      	ble.n	8003072 <Timer_hal_PWM_DC+0x22>
            {
                timer_hal_err_t *ret;          // for compliance
                timer_hal_error_handler(&ret); // for further error implementation
 8003068:	f107 030c 	add.w	r3, r7, #12
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fa29 	bl	80024c4 <timer_hal_error_handler>
            }
            i++;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	3301      	adds	r3, #1
 8003076:	617b      	str	r3, [r7, #20]
        while (pwm_hal_cfg_buff[i].pwm_enum != oc)
 8003078:	4b37      	ldr	r3, [pc, #220]	; (8003158 <Timer_hal_PWM_DC+0x108>)
 800307a:	6819      	ldr	r1, [r3, #0]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	79fa      	ldrb	r2, [r7, #7]
 800308c:	429a      	cmp	r2, r3
 800308e:	d1e8      	bne.n	8003062 <Timer_hal_PWM_DC+0x12>
        }
        
        int j = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]
        // search the corresponding timer
        while (pwm_hal_cfg_buff[i].tmr != timer_hal_cfg_buff[j].tmr)
 8003094:	e00a      	b.n	80030ac <Timer_hal_PWM_DC+0x5c>
        {
            if (j > CONF_TIMER_ENUM_UNUSED)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b02      	cmp	r3, #2
 800309a:	dd04      	ble.n	80030a6 <Timer_hal_PWM_DC+0x56>
            {
                timer_hal_err_t *ret;          // for compliance
                timer_hal_error_handler(&ret); // for further error implementation
 800309c:	f107 0308 	add.w	r3, r7, #8
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fa0f 	bl	80024c4 <timer_hal_error_handler>
            }
            j++;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	3301      	adds	r3, #1
 80030aa:	613b      	str	r3, [r7, #16]
        while (pwm_hal_cfg_buff[i].tmr != timer_hal_cfg_buff[j].tmr)
 80030ac:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <Timer_hal_PWM_DC+0x108>)
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	785a      	ldrb	r2, [r3, #1]
 80030be:	4b27      	ldr	r3, [pc, #156]	; (800315c <Timer_hal_PWM_DC+0x10c>)
 80030c0:	6819      	ldr	r1, [r3, #0]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	440b      	add	r3, r1
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d1e3      	bne.n	8003096 <Timer_hal_PWM_DC+0x46>
        }
        __HAL_TIM_SET_COMPARE(&tim[j], pwm_hal_cfg_buff[i].channel, val);
 80030ce:	4b22      	ldr	r3, [pc, #136]	; (8003158 <Timer_hal_PWM_DC+0x108>)
 80030d0:	6819      	ldr	r1, [r3, #0]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <Timer_hal_PWM_DC+0xa4>
 80030e4:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <Timer_hal_PWM_DC+0x110>)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	019b      	lsls	r3, r3, #6
 80030ea:	4413      	add	r3, r2
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80030f2:	e02c      	b.n	800314e <Timer_hal_PWM_DC+0xfe>
        __HAL_TIM_SET_COMPARE(&tim[j], pwm_hal_cfg_buff[i].channel, val);
 80030f4:	4b18      	ldr	r3, [pc, #96]	; (8003158 <Timer_hal_PWM_DC+0x108>)
 80030f6:	6819      	ldr	r1, [r3, #0]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b04      	cmp	r3, #4
 8003108:	d107      	bne.n	800311a <Timer_hal_PWM_DC+0xca>
 800310a:	4a15      	ldr	r2, [pc, #84]	; (8003160 <Timer_hal_PWM_DC+0x110>)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	019b      	lsls	r3, r3, #6
 8003110:	4413      	add	r3, r2
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003118:	e019      	b.n	800314e <Timer_hal_PWM_DC+0xfe>
        __HAL_TIM_SET_COMPARE(&tim[j], pwm_hal_cfg_buff[i].channel, val);
 800311a:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <Timer_hal_PWM_DC+0x108>)
 800311c:	6819      	ldr	r1, [r3, #0]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d107      	bne.n	8003140 <Timer_hal_PWM_DC+0xf0>
 8003130:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <Timer_hal_PWM_DC+0x110>)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	019b      	lsls	r3, r3, #6
 8003136:	4413      	add	r3, r2
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800313e:	e006      	b.n	800314e <Timer_hal_PWM_DC+0xfe>
        __HAL_TIM_SET_COMPARE(&tim[j], pwm_hal_cfg_buff[i].channel, val);
 8003140:	4a07      	ldr	r2, [pc, #28]	; (8003160 <Timer_hal_PWM_DC+0x110>)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	019b      	lsls	r3, r3, #6
 8003146:	4413      	add	r3, r2
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800314e:	bf00      	nop
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000044 	.word	0x20000044
 800315c:	20000040 	.word	0x20000040
 8003160:	2000011c 	.word	0x2000011c

08003164 <prova_isr_app>:
const timer_hal_conf_t* timer_prova_conf;
const timer_hal_oc_conf_t* oc_prova_conf;
const timer_hal_pwm_conf_t* pwm_prova_conf;

void prova_isr_app(timer_hal_irq_src_t timer)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	71fb      	strb	r3, [r7, #7]
	if (timer == TIMER_HAL_CH1) // livello applicativo, puo avere qualisasi nome
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d115      	bne.n	80031a0 <prova_isr_app+0x3c>
	{

		Gpio_hal_set_value(DEBUG_LED, GPIO_LOW);  // stesso per gpio, puo avere qualisasi nome
 8003174:	2100      	movs	r1, #0
 8003176:	2000      	movs	r0, #0
 8003178:	f7fe feb8 	bl	8001eec <Gpio_hal_set_value>

		Timer_hal_OC_period(OC_CHANNEL_TEST_1, (uint16_t)(Timer_hal_OC_get(OC_CHANNEL_TEST_1)+8500));
 800317c:	2000      	movs	r0, #0
 800317e:	f7ff fd2d 	bl	8002bdc <Timer_hal_OC_get>
 8003182:	4603      	mov	r3, r0
 8003184:	b29b      	uxth	r3, r3
 8003186:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800318a:	3334      	adds	r3, #52	; 0x34
 800318c:	b29b      	uxth	r3, r3
 800318e:	4619      	mov	r1, r3
 8003190:	2000      	movs	r0, #0
 8003192:	f7ff fda7 	bl	8002ce4 <Timer_hal_OC_period>
		Gpio_hal_set_value(DEBUG_LED, GPIO_HIGH);
 8003196:	2101      	movs	r1, #1
 8003198:	2000      	movs	r0, #0
 800319a:	f7fe fea7 	bl	8001eec <Gpio_hal_set_value>
	}
	else
	{
		asm("nop");
	}
}
 800319e:	e000      	b.n	80031a2 <prova_isr_app+0x3e>
		asm("nop");
 80031a0:	bf00      	nop
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <main>:


int main(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
    gpio_prova_conf = Gpio_hal_conf_get();
 80031b0:	f7fe fd72 	bl	8001c98 <Gpio_hal_conf_get>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b24      	ldr	r3, [pc, #144]	; (8003248 <main+0x9c>)
 80031b8:	601a      	str	r2, [r3, #0]
	// prepare the eventual additiona HAL layers
	Core_hal_init();
 80031ba:	f7fe fffb 	bl	80021b4 <Core_hal_init>
	// clock
	Clock_hal_init();
 80031be:	f7fe fe3b 	bl	8001e38 <Clock_hal_init>
	// interrupt systeme
	IntHal_vector_init();
 80031c2:	f7ff f845 	bl	8002250 <IntHal_vector_init>

	Gpio_hal_init(gpio_prova_conf);
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <main+0x9c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fedc 	bl	8001f88 <Gpio_hal_init>
	Gpio_hal_set_value(DEBUG_LED, GPIO_HIGH);
 80031d0:	2101      	movs	r1, #1
 80031d2:	2000      	movs	r0, #0
 80031d4:	f7fe fe8a 	bl	8001eec <Gpio_hal_set_value>
	Gpio_hal_set_value(DEBUG_LED, GPIO_LOW);
 80031d8:	2100      	movs	r1, #0
 80031da:	2000      	movs	r0, #0
 80031dc:	f7fe fe86 	bl	8001eec <Gpio_hal_set_value>
	// Clock_hal_clk_out(RCC_MCO1SOURCE_HSI); // debug - not HAL compliant

	// //tmr start
    timer_prova_conf = Timer_hal_conf_get();
 80031e0:	f7fe fd80 	bl	8001ce4 <Timer_hal_conf_get>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b19      	ldr	r3, [pc, #100]	; (800324c <main+0xa0>)
 80031e8:	601a      	str	r2, [r3, #0]
    oc_prova_conf = Timer_hal_OC_conf_get();
 80031ea:	f7fe fd71 	bl	8001cd0 <Timer_hal_OC_conf_get>
 80031ee:	4602      	mov	r2, r0
 80031f0:	4b17      	ldr	r3, [pc, #92]	; (8003250 <main+0xa4>)
 80031f2:	601a      	str	r2, [r3, #0]
	Timer_hal_init(timer_prova_conf);
 80031f4:	4b15      	ldr	r3, [pc, #84]	; (800324c <main+0xa0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff f96f 	bl	80024dc <Timer_hal_init>
	Timer_hal_set_ISR_cb(TIMER_4, prova_isr_app);
 80031fe:	4915      	ldr	r1, [pc, #84]	; (8003254 <main+0xa8>)
 8003200:	2000      	movs	r0, #0
 8003202:	f7ff faa1 	bl	8002748 <Timer_hal_set_ISR_cb>
	Timer_hal_OC_init(oc_prova_conf);
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <main+0xa4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fafc 	bl	8002808 <Timer_hal_OC_init>
	Timer_hal_OC_period(OC_CHANNEL_TEST_1, 0xff55);
 8003210:	f64f 7155 	movw	r1, #65365	; 0xff55
 8003214:	2000      	movs	r0, #0
 8003216:	f7ff fd65 	bl	8002ce4 <Timer_hal_OC_period>

	IntHal_enable_global_interrupt();
 800321a:	f7ff f812 	bl	8002242 <IntHal_enable_global_interrupt>
	Timer_hal_OC_start(OC_CHANNEL_TEST_1);
 800321e:	2000      	movs	r0, #0
 8003220:	f7ff fc88 	bl	8002b34 <Timer_hal_OC_start>
	// //pwm
    pwm_prova_conf = Timer_hal_PWM_conf_get();
 8003224:	f7fe fd4a 	bl	8001cbc <Timer_hal_PWM_conf_get>
 8003228:	4602      	mov	r2, r0
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <main+0xac>)
 800322c:	601a      	str	r2, [r3, #0]
	Timer_hal_PWM_init(pwm_prova_conf);
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <main+0xac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fde0 	bl	8002df8 <Timer_hal_PWM_init>
	// Timer_hal_PWM_start(&timer_hal_test_conf[0]);
	Timer_hal_PWM_DC(PWM_CHANNEL_TEST_1, 95);
 8003238:	215f      	movs	r1, #95	; 0x5f
 800323a:	2000      	movs	r0, #0
 800323c:	f7ff ff08 	bl	8003050 <Timer_hal_PWM_DC>
	// // OC
	// Timer_hal_OC_init(&timer_hal_test_conf[1]);
	Timer_hal_PWM_start(PWM_CHANNEL_TEST_1);
 8003240:	2000      	movs	r0, #0
 8003242:	f7ff feb1 	bl	8002fa8 <Timer_hal_PWM_start>
	//Timer_hal_OC_period(&timer_hal_test_conf[1], 1500);

//int enable


	for(;;);
 8003246:	e7fe      	b.n	8003246 <main+0x9a>
 8003248:	200002f4 	.word	0x200002f4
 800324c:	200002fc 	.word	0x200002fc
 8003250:	20000300 	.word	0x20000300
 8003254:	08003165 	.word	0x08003165
 8003258:	200002f8 	.word	0x200002f8

0800325c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800325c:	480d      	ldr	r0, [pc, #52]	; (8003294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800325e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003260:	480d      	ldr	r0, [pc, #52]	; (8003298 <LoopForever+0x6>)
  ldr r1, =_edata
 8003262:	490e      	ldr	r1, [pc, #56]	; (800329c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003264:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <LoopForever+0xe>)
  movs r3, #0
 8003266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003268:	e002      	b.n	8003270 <LoopCopyDataInit>

0800326a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800326a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800326c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800326e:	3304      	adds	r3, #4

08003270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003274:	d3f9      	bcc.n	800326a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003276:	4a0b      	ldr	r2, [pc, #44]	; (80032a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003278:	4c0b      	ldr	r4, [pc, #44]	; (80032a8 <LoopForever+0x16>)
  movs r3, #0
 800327a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800327c:	e001      	b.n	8003282 <LoopFillZerobss>

0800327e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800327e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003280:	3204      	adds	r2, #4

08003282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003284:	d3fb      	bcc.n	800327e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003286:	f7fe fd37 	bl	8001cf8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800328a:	f000 f811 	bl	80032b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800328e:	f7ff ff8d 	bl	80031ac <main>

08003292 <LoopForever>:

LoopForever:
    b LoopForever
 8003292:	e7fe      	b.n	8003292 <LoopForever>
  ldr   r0, =_estack
 8003294:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800329c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80032a0:	0800342c 	.word	0x0800342c
  ldr r2, =_sbss
 80032a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80032a8:	20000304 	.word	0x20000304

080032ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032ac:	e7fe      	b.n	80032ac <ADC1_2_IRQHandler>
	...

080032b0 <__libc_init_array>:
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	2500      	movs	r5, #0
 80032b4:	4e0c      	ldr	r6, [pc, #48]	; (80032e8 <__libc_init_array+0x38>)
 80032b6:	4c0d      	ldr	r4, [pc, #52]	; (80032ec <__libc_init_array+0x3c>)
 80032b8:	1ba4      	subs	r4, r4, r6
 80032ba:	10a4      	asrs	r4, r4, #2
 80032bc:	42a5      	cmp	r5, r4
 80032be:	d109      	bne.n	80032d4 <__libc_init_array+0x24>
 80032c0:	f000 f822 	bl	8003308 <_init>
 80032c4:	2500      	movs	r5, #0
 80032c6:	4e0a      	ldr	r6, [pc, #40]	; (80032f0 <__libc_init_array+0x40>)
 80032c8:	4c0a      	ldr	r4, [pc, #40]	; (80032f4 <__libc_init_array+0x44>)
 80032ca:	1ba4      	subs	r4, r4, r6
 80032cc:	10a4      	asrs	r4, r4, #2
 80032ce:	42a5      	cmp	r5, r4
 80032d0:	d105      	bne.n	80032de <__libc_init_array+0x2e>
 80032d2:	bd70      	pop	{r4, r5, r6, pc}
 80032d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032d8:	4798      	blx	r3
 80032da:	3501      	adds	r5, #1
 80032dc:	e7ee      	b.n	80032bc <__libc_init_array+0xc>
 80032de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032e2:	4798      	blx	r3
 80032e4:	3501      	adds	r5, #1
 80032e6:	e7f2      	b.n	80032ce <__libc_init_array+0x1e>
 80032e8:	08003424 	.word	0x08003424
 80032ec:	08003424 	.word	0x08003424
 80032f0:	08003424 	.word	0x08003424
 80032f4:	08003428 	.word	0x08003428

080032f8 <memset>:
 80032f8:	4603      	mov	r3, r0
 80032fa:	4402      	add	r2, r0
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d100      	bne.n	8003302 <memset+0xa>
 8003300:	4770      	bx	lr
 8003302:	f803 1b01 	strb.w	r1, [r3], #1
 8003306:	e7f9      	b.n	80032fc <memset+0x4>

08003308 <_init>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	bf00      	nop
 800330c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330e:	bc08      	pop	{r3}
 8003310:	469e      	mov	lr, r3
 8003312:	4770      	bx	lr

08003314 <_fini>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	bf00      	nop
 8003318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331a:	bc08      	pop	{r3}
 800331c:	469e      	mov	lr, r3
 800331e:	4770      	bx	lr
